{
    "componentChunkName": "component---src-templates-generic-template-tsx",
    "path": "/forms/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Cactus Form\",\n  \"order\": 10\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Forms\"), mdx(\"p\", null, \"The Cactus Form library wraps \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://final-form.org\"\n  }, \"final-form\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-final-form\"), \"\\nto provide functionality commonly used in our designs, and fix a couple of \\u201Cbugs\\u201D\\nthat don\\u2019t really appear in normal usage but do appear in the way our designs work.\\nWe use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"final-form\"), \" because it has a good feature set and flexibility,\\nwhile being more efficient when working on large forms than other options.\"), mdx(\"h2\", null, \"Quick Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    to: \"./api-documentation/\"\n  }, \"API Documentation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/repaygithub/cactus/tree/master/modules/cactus-form\"\n  }, \"Source Code\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://final-form.org\"\n  }, \"final-form\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://final-form.org/react\"\n  }, \"react-final-form\"))), mdx(\"h2\", null, \"Getting Started\"), mdx(\"p\", null, \"Both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"final-form\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-final-form\"), \", as well as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@repay/cactus-web\"), \" are peer dependencies of Cactus Form.\\nThere\\u2019s also an optional step to make React Final Form a little more cactus-friendly;\\nsee the \\u201CPatching React Final Form\\u201D section below.\"), mdx(\"p\", null, \"Once everything is installed, Cactus Form is used basically the same way as React Final Form.\\nIn particular, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Field\"), \" component is very similar to\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://final-form.org/docs/react-final-form/api/Field\"\n  }, \"React Final Form\\u2019s version\"), \",\\nbut it has customization features and handles prop forwarding a bit differently:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can set a default \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"subscription\"), \" under the assumption that most fields in your project will work similarly. The included default includes the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \" and error fields.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can provide a function to derive a component from the props. This is included to help with dynamic forms, where field types may be stored as strings in a configuration data structure; using this method, you can pass your configuration directly to the field, and map it to a concrete component class/function. The included default mostly maps the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"type\"), \" prop to field components from Cactus Web.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It adds a post-processing callback for customizing how \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://final-form.org/docs/react-final-form/types/FieldRenderProps\"\n  }, \"the render props\"), \" are combined. The included default adds an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"error\"), \" prop if the field has been touched or the form submitted.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each of these can be configured project-wide, or overridden on a per-render basis.\")), mdx(\"p\", null, \"More info on those, along with the two new components \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FieldSpy\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DependentField\"), \",\\nis in the \", mdx(\"a\", {\n    to: \"./api-documentation/\"\n  }, \"API documentation\"), \".\"), mdx(\"h3\", null, \"Patching React Final Form\"), mdx(\"p\", null, \"Cactus Form should work fine out of the box, but there are a couple of issues\\nwith certain Cactus components and common design patterns:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React Final Form doesn\\u2019t work with CheckBoxGroup/CheckBoxCard.Group & array values (i.e. multiple checkboxes with the same name); you have to wrap each checkbox individually, and pass \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"type=\\\"checkbox\\\"\"), \" on each one.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"With both checkbox groups and radio groups, React Final Form emits a warning that you need to pass \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"type=\\\"checkbox\\\"\"), \" (or \\u201Cradio\\u201D), but if you actually do so it will give the wrong checked/value props to the group component.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We often put fields into Accordions that can be re-ordered, e.g. when there\\u2019s a repeatable subset of fields on the form. However, Accordion only renders its child fields when it\\u2019s open, and the mutators in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"final-form-arrays\"), \" are not compatible with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"react-final-form\"), \" unless the source and destination fields being reordered are both rendered on the page.\")), mdx(\"p\", null, \"To work around these issues, we provide a patch that can be applied using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/patch-package\"\n  }, \"patch-package\"), \".\\nBecause this is a library we can\\u2019t just apply the patch automatically, so it takes a couple of extra steps:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make sure you have \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"patch-package\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"devDependencies\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dependencies\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add the following to your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"package.json\"), \":\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\\"scripts\\\": {\\n  \\\"postinstall\\\": \\\"patch-package --patch-dir=node_modules/@repay/cactus-form/dist\\\"\\n}\\n\")), mdx(\"p\", null, \"Or, if you already use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"patch-package\"), \" in your project, you may need to run it twice:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\\"scripts\\\": {\\n  \\\"postinstall\\\": \\\"patch-package && patch-package --patch-dir=node_modules/@repay/cactus-form/dist\\\"\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"title":"Cactus Form","slug":"/forms/"}}},"pageContext":{"slug":"/forms/"}},
    "staticQueryHashes": ["3276690975"]}