{
    "componentChunkName": "component---src-templates-generic-template-tsx",
    "path": "/how-tos/forms/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"How to Write Cactus Forms Using Final Form\"), mdx(\"p\", null, \"Collecting data using forms is one of the most basic functions of a website. \", mdx(\"a\", {\n    to: \"/components/\"\n  }, \"@repay/cactus-web\"), \" provides several styled form inputs, as well as a few custom inputs that emulate built-in HTML inputs. This guide will show you the basics of combining these input components with a common forms library, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://final-form.org/\"\n  }, \"Final Form\"), \".\"), mdx(\"p\", null, \"Because Final Form is framework-agnostic, there\\u2019s \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://final-form.org/react\"\n  }, \"another library\"), \" for the React-specific parts. Besides the official React Final Form library, we have our own addition in \", mdx(\"a\", {\n    to: \"/forms/\"\n  }, \"@repay/cactus-form\"), \" that\\u2019s more specifically suited to working with Cactus Web.\"), mdx(\"p\", null, \"Before starting, you should have an application, and know how to add a page or component. The examples used will be based on an app like those created by the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/repaygithub/ui-tools/tree/master/modules/create-repay-ui\"\n  }, \"@repay/create-ui\"), \" package; see \", mdx(\"a\", {\n    to: \"/tutorials/responsive-web-design/\"\n  }, \"this tutorial\"), \" for an example with starting a new project.\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"Installation is simple enough, just add the latest version of \\u201Cfinal-form\\u201D, \\u201Creact-final-form\\u201D, and \\u201C@repay/cactus-form\\u201D to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dependencies\"), \" list in your package.json (or however you add dependencies in your particular project).\"), mdx(\"p\", null, \"Cactus Form also has an optional setup step using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/patch-package\"\n  }, \"patch-package\"), \", described in more depth in the library documentation.\"), mdx(\"h2\", null, \"Using React Final Form\"), mdx(\"p\", null, \"The basic Final Form library is very flexible, and we highly recommend going through the docs to understand what it\\u2019s capable of. However, the majority of use cases can be covered by the components in React Final Form and Cactus Form.\"), mdx(\"p\", null, \"To make a form you start with the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://final-form.org/docs/react-final-form/api/Form\"\n  }, \"Form\"), \" component,\\nwhich creates both a form and a React context that allows you to access it from any descendants.\\nOnce the form is created, there are a variety of hooks and components that can be used to implement the functionality.\\nWe won\\u2019t be getting into all the arguments and subtleties since those are well-covered in the documentation,\\njust covering enough to show how it works with Cactus components.\"), mdx(\"p\", null, \"Creating a form is simple:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { Field } from '@repay/cactus-form'\\nimport { Button } from '@repay/cactus-web'\\nimport { Form } from 'react-final-form'\\nimport React from 'react'\\n\\nconst TestForm = (props) => (\\n  <Form {...props}>\\n    {({ handleSubmit, invalid, error }) => (\\n      <form onSubmit={handleSubmit}>\\n        {error && (<Alert status=\\\"error\\\">{error}</Alert>)}\\n        <Field id=\\\"text-input\\\" name=\\\"mytext\\\" label=\\\"Enter some text\\\" />\\n        <Field type=\\\"checkbox\\\" name=\\\"mycb\\\" label=\\\"Check me (or don't)\\\" />\\n        <Button type=\\\"submit\\\" disabled={invalid}>Save</Button>\\n      </form>\\n    )}\\n  </Form>\\n)\\n\")), mdx(\"p\", null, \"The Cactus Form version of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Field\"), \" automatically maps \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" to Cactus Web components:\\nthe example above will render a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TextInputField\"), \" and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CheckBoxField\"), \",\\nbut this behavior is customizable in a number of ways, covered more in the docs.\\nField also automatically adds \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"checked\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onBlur\"), \" props to the field.\"), mdx(\"p\", null, \"If the default components don\\u2019t quite do what you need, you can fall back to\\nhooks that give you greater control over how to interact with Final Form.\\nIn particular, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useForm\"), \" gives you access to the basic Final Form API with significant customization options.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import { useField, useForm } from 'react-final-form'\\n\\nconst CustomField = (props) => {\\n  const { input, meta } = useField(props.name, props)\\n  if (meta.error) {\\n    return <Alert status=\\\"error\\\">All is lost, no hope of recovery.</Alert>\\n  }\\n  return <FieldLike {...props} {...input} touched={meta.touched} />\\n}\\n\\nconst SuperCustomField = (props) => {\\n  const form = useForm()\\n  const [state, setState] = React.useState()\\n  React.useEffect(() => {\\n    const listener = (state) => {\\n      props.doSomeCustomLogic(state)\\n      form.mutators.updateSomeOtherFormState(state.value)\\n      setState(state)\\n    }\\n    return form.registerField(props.name, listener, props.subscription, props)\\n  }, [props.name])\\n  if (!state) return null\\n  return <FieldLike {...state} />\\n}\\n\")), mdx(\"h2\", null, \"Final Form & Cactus\"), mdx(\"p\", null, \"Cactus has two basic kinds of field components: regular HTML inputs that have simply been styled using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@repay/cactus-theme\"), \", and custom components that mimic regular HTML inputs. These are the styled inputs and their default mapping in Cactus Form:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CheckBox\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CheckBoxField\"), \" (type=\\u201Ccheckbox\\u201D)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CheckBoxCard\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RadioButton\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RadioButtonField\"), \" (type=\\u201Cradio\\u201D)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RadioCard\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TextArea\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TextAreaField\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TextInput\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TextInputField\"), \" (default/type=\\u201Ctext\\u201D)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Toggle\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ToggleField\"), \" (type=\\u201Cboolean\\u201D)\")), mdx(\"p\", null, \"And these are the custom components:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ColorPicker\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DateInput\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DateInputField\"), \" (type=\\u201Cdate\\u201D/\\u201Ctime\\u201D/\\u201Cdatetime\\u201D)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FileInput\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FileInputField\"), \" (type=\\u201Cfile\\u201D)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RadioGroup\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RadioCard.Group\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Select\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SelectField\"), \" (type=\\u201Cselect\\u201D/\\u201CmultiSelect\\u201D)\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CheckBoxGroup\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CheckBoxCard.Group\"), \" is a special case, since it\\u2019s not a single field, but we\\u2019ll cover it separately.\"), mdx(\"h3\", null, \"Field Examples\"), mdx(\"p\", null, \"Almost all of our components work out-of-the-box with the Cactus Form \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Field\"), \" component.\\nYou can either rely on the default mapping, configure your own, or explicitly pass the field you want to use;\\njust replace where you\\u2019d normally call the Cactus field component with Field,\\nand props are forwarded to the underlying component, including children.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { Field } from '@repay/cactus-form'\\n\\n<Field as={RadioCard.Group} name=\\\"radios\\\" label=\\\"Some radio buttons\\\">\\n  <RadioCard value=\\\"ham\\\">Ham Radio</RadioCard>\\n  <RadioCard value=\\\"transistor\\\">Transistor Radio</RadioCard>\\n</Field>\\n<Field\\n  type=\\\"select\\\"\\n  multiple\\n  name=\\\"selection\\\"\\n  label=\\\"Select Something(s)\\\"\\n  options={['option1', 'variant2', 'type3']}\\n/>\\n\")), mdx(\"p\", null, \"The basic React Final Form \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Field\"), \" component does not directly support custom components:\\nthey have to be explicitly rendered, which is why we recommend Cactus Form.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { Field as CactusField } from '@repay/cactus-form'\\nimport { Field } from 'react-final-form'\\n\\n<Field name=\\\"myfield\\\" subscription={{ value: true, error: true }}>\\n  {({ input, meta }) => (\\n    <TextInputField {...input} error={meta.error} label=\\\"My Field\\\" />\\n  )}\\n</Field>\\n// which is roughly the same as\\n<CactusField name=\\\"myfield\\\" label=\\\"My Field\\\" type=\\\"text\\\" />\\n\")), mdx(\"h3\", null, \"Radio Buttons, Checkboxes & Toggles\"), mdx(\"p\", null, \"React Final Form has some special behavior around radio buttons and checkboxes\\nthat needs to be mentioned, due to the addition of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"checked\"), \" prop.\\nWhile radio groups work out-of-the-box, a single radio button or checkbox needs a slight adjustment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Field as={RadioButtonField} type=\\\"radio\\\" {...rest} />\\n<Field as={CheckBoxField} type=\\\"checkbox\\\" {...rest} />\\n<Field as={ToggleField} type=\\\"checkbox\\\" {...rest} />\\n\")), mdx(\"p\", null, \"Even if you explicitly tell it which component to use, you \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"also\"), \" must pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" prop\\nto tell final form that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"checked\"), \" is needed, and how to calculate it.\\nThe corollary is that you should \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"never\"), \" pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" prop to a radio or checkbox \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"group\"), \",\\nbecause those work using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" prop like a generic input instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"checked\"), \".\"), mdx(\"h3\", null, \"Checkbox Groups\"), mdx(\"p\", null, \"Checkbox groups are the trickiest field types, because they can be used in two different ways:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Creates form values like -> { cbgroup: [\\\"one\\\", \\\"three\\\"] }\\n<Field as={CheckBoxGroup} name=\\\"cbgroup\\\" label=\\\"Array Of Strings\\\">\\n  <CheckBoxGroup.Item value=\\\"one\\\" label=\\\"Uno\\\" />\\n  <CheckBoxGroup.Item value=\\\"two\\\" label=\\\"Dos\\\" />\\n  <CheckBoxGroup.Item value=\\\"three\\\" label=\\\"Tres\\\" />\\n</Field>\\n\\n// Creates form values like -> { uno: true, dos: false, tres: true }\\n<CheckBoxCard.Group label=\\\"Several Unrelated Booleans\\\">\\n  <Field as={CheckBoxCard} type=\\\"checkbox\\\" name=\\\"uno\\\">One</Field>\\n  <Field as={CheckBoxCard} type=\\\"checkbox\\\" name=\\\"dos\\\">Two</Field>\\n  <Field as={CheckBoxCard} type=\\\"checkbox\\\" name=\\\"tres\\\">Three</Field>\\n</CheckBoxCard.Group>\\n\")), mdx(\"p\", null, \"Note that you need as many Field components as there are unique names.\"), mdx(\"p\", null, \"The array group variant will only work if you do the optional patch-package step\\nwhen installing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@repay/cactus-form\"), \".\\nHowever, even if you don\\u2019t use the patch you can still support checkbox arrays with more verbose code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// CheckBoxGroup forwards `name` to all its children, so you don't have to repeat it.\\n<CheckBoxGroup name=\\\"cbgroup\\\" label=\\\"Array Of Strings\\\">\\n  <Field as={CheckBoxGroup.Item} type=\\\"checkbox\\\" value=\\\"one\\\" label=\\\"Uno\\\" />\\n  <Field as={CheckBoxGroup.Item} type=\\\"checkbox\\\" value=\\\"two\\\" label=\\\"Dos\\\" />\\n  <Field as={CheckBoxGroup.Item} type=\\\"checkbox\\\" value=\\\"three\\\" label=\\\"Tres\\\" />\\n</CheckBoxGroup>\\n\")), mdx(\"h3\", null, \"Further Reading\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://final-form.org/docs/final-form/getting-started\"\n  }, \"Final Form Documentation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://final-form.org/docs/react-final-form/getting-started\"\n  }, \"React Final Form Documentation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    to: \"/components/\"\n  }, \"@repay/cactus-web Documentation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    to: \"/forms/\"\n  }, \"@repay/cactus-form Documentation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/repaygithub/cactus/tree/master/examples/mock-ebpp\"\n  }, \"Example app w/ form (UI Config page)\"))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"title":"How to Write Cactus Forms Using Final Form","slug":"/how-tos/forms/"}}},"pageContext":{"slug":"/how-tos/forms/"}},
    "staticQueryHashes": ["3276690975"]}