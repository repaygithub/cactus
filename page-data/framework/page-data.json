{"componentChunkName":"component---src-templates-generic-template-tsx","path":"/framework/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Cactus Framework\"), mdx(\"p\", null, \"The Cactus Framework implements a set of common front-end necessities at a top level provided via React context. The framework attempts to have fewer top level provider components and implements hooks and higher-order components to access these data stores as needed.\"), mdx(\"h2\", null, \"Quick Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    to: \"./api\"\n  }, \"API Documentation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    to: \"./api/error-boundary\"\n  }, \" Error Boundary\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    to: \"./api/feature-flags\"\n  }, \" Feature Flags\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/repaygithub/cactus/tree/master/modules/cactus-fwk\"\n  }, \"Source Code\"))), mdx(\"h2\", null, \"Getting Started\"), mdx(\"p\", null, \"Install via node based package manager\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"yarn add --dev @repay/cactus-fwk\\n\")), mdx(\"p\", null, \"Import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppRoot\"), \" component and use it near the top level of your application. Then provide your feature flag object\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// entry.tsx\\nimport React, { useEffect, useState } from 'react'\\nimport { Router } from '@reach/router'\\nimport AppRoot, { FeatureFlagsObject } from '@repay/cactus-fwk'\\nimport HomePage from './pages/Home'\\nimport PageOne from './pages/PageOne'\\nimport PageTwo from './pages/PageTwo'\\nimport fetchFeatureFlags from './api/featureFlags'\\n\\n/**\\n * FeatureFlagsObject = { [key: string]: boolean }\\n */\\n\\nexport default () => {\\n  const [features, setFeatures] = useState<FeatureFlagsObject>(undefined)\\n  useEffect(() => {\\n    /** fetchFeatureFlags returns a Promise<FeatureFlagsObject>\\n     */\\n    fetchFeatureFlags().then((featuresData) => setFeatures(featuresData))\\n    // You should catch errors here but the example is not going to address that\\n  }, [setFeatures])\\n\\n  return (\\n    <AppRoot featureFlags={features}>\\n      <Router>\\n        <HomePage path=\\\"/\\\" />\\n        <PageOne path=\\\"/page-one\\\" />\\n        <PageTwo path=\\\"/page-two\\\" />\\n      </Router>\\n    </AppRoot>\\n  )\\n}\\n\")), mdx(\"p\", null, \"Use the provided context by importing the respective hooks or other utilities in the component which needs the data. In this case we import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useFeatureFlag\"), \" hook.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// ./pages/Home.tsx\\nimport * as React from 'react'\\nimport { useFeatureFlags } from '@repay/cactus-fwk'\\n\\ninterface Props {\\n  customWelcomeMessage?: string\\n}\\n\\nconst Home: React.FC<Props> = (props) => {\\n  const [customWelcomeEnabled] = useFeatureFlags('custom_welcome_message')\\n\\n  return (\\n    <div>\\n      <h1>Home Page</h1>\\n      <p>The normal welcome message</p>\\n      {customWelcomeEnabled && props.customWelcomeMessage && <p>{props.customWelcomeMessage}</p>}\\n    </div>\\n  )\\n}\\n\\nexport default Home\\n\")), mdx(\"p\", null, \"Next read the rest of the \", mdx(\"a\", {\n    to: \"./api\"\n  }, \"API Documentation\"), \" or checkout out the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/repaygithub/cactus/tree/master/examples\"\n  }, \"examples folder\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"title":"Cactus Framework","slug":"/framework/"}}},"pageContext":{"slug":"/framework/"}},"staticQueryHashes":["3276690975"]}