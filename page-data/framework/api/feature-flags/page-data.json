{"componentChunkName":"component---src-templates-generic-template-tsx","path":"/framework/api/feature-flags/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Feature Flags\"), mdx(\"h2\", null, \"Set up the context\"), mdx(\"p\", null, \"Import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppRoot\"), \" component and use it near the top level of your application. Then provide your feature flag object as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"featureFlags\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// entry.tsx\\nimport React, { useEffect, useState } from 'react'\\nimport { Router } from '@reach/router'\\nimport AppRoot, { FeatureFlagsObject } from '@repay/cactus-fwk'\\nimport HomePage from './pages/Home'\\nimport PageOne from './pages/PageOne'\\nimport PageTwo from './pages/PageTwo'\\nimport fetchFeatureFlags from './api/featureFlags'\\n\\n/**\\n * FeatureFlagsObject = { [key: string]: boolean }\\n */\\n\\nexport default () => {\\n  const [features, setFeatures] = useState<FeatureFlagsObject>(undefined)\\n  useEffect(() => {\\n    /** fetchFeatureFlags returns a Promise<FeatureFlagsObject>\\n     */\\n    fetchFeatureFlags().then(featuresData => setFeatures(featuresData))\\n    // You should catch errors here but the example is not going to address that\\n  }, [setFeatures])\\n\\n  return (\\n    <AppRoot featureFlags={features}>\\n      <Router>\\n        <HomePage path=\\\"/\\\" />\\n        <PageOne path=\\\"/page-one\\\" />\\n        <PageTwo path=\\\"/page-two\\\" />\\n      </Router>\\n    </AppRoot>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"Access using the hook\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// type definition\\nconst useFeatureFlags: (...features: string[]) => boolean[]\\n\")), mdx(\"p\", null, \"In the component which needs the feature flag, import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useFeatureFlag\"), \" hook.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// ./pages/Home.tsx\\nimport * as React from 'react'\\nimport { useFeatureFlags } from '@repay/cactus-fwk'\\n\\ninterface Props {\\n  customWelcomeMessage?: string\\n}\\n\\nconst Home: React.FC<Props> = props => {\\n  const [customWelcomeEnabled, otherFeatureEnabled] = useFeatureFlags(\\n    // any number of flags can be provided as arguments\\n    'custom_welcome_message',\\n    'other_feature_flag'\\n  )\\n\\n  return (\\n    <div>\\n      <h1>Home Page</h1>\\n      <p>The normal welcome message</p>\\n      {customWelcomeEnabled && props.customWelcomeMessage && <p>{props.customWelcomeMessage}</p>}\\n    </div>\\n  )\\n}\\n\\nexport default Home\\n\")), mdx(\"h2\", null, \"Using a higher order component\"), mdx(\"p\", null, \"If you are using a class component or don\\u2019t want to use the hook, you can use the higher order component function to add the feature flags as a prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// ./pages/Home.tsx\\nimport * as React from 'react'\\nimport { withFeatureFlags } from '@repay/cactus-fwk'\\n\\ninterface Props {\\n  /**\\n   * Be careful when naming props as you can see here the feature flags\\n   * are applied as the key provided so it would probably be better to\\n   * rename the customWelcomMessage prop\\n   */\\n  custom_welcome_message?: boolean\\n  customWelcomeMessage?: string\\n}\\n\\nconst Home: React.FC<Props> = props => {\\n  const customWelcomeEnabled = props.custom_welcome_message\\n  return (\\n    <div>\\n      <h1>Home Page</h1>\\n      <p>The normal welcome message</p>\\n      {customWelcomeEnabled && props.customWelcomeMessage && <p>{props.customWelcomeMessage}</p>}\\n    </div>\\n  )\\n}\\n\\nexport default withFeatureFlags(['custom_welcome_message'], Home)\\n\")), mdx(\"h2\", null, \"Using render props\"), mdx(\"p\", null, \"Another alternative is to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FeatureFlag\"), \" component which accepts two required props:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prop Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"feature\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"key of feature\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(boolean) => React.Component\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"render function\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// ./pages/Home.tsx\\nimport * as React from 'react'\\nimport { FeatureFlag } from '@repay/cactus-fwk'\\n\\ninterface Props {\\n  customWelcomeMessage?: string\\n}\\n\\nconst Home: React.FC<Props> = props => (\\n  <div>\\n    <h1>Home Page</h1>\\n    <p>The normal welcome message</p>\\n    <FeatureFlag feature=\\\"custom_welcome_message\\\">\\n      {featureEnabled =>\\n        featureEnabled && props.customWelcomeMessage ? <p>{props.customWelcomeMessage}</p> : null\\n      }\\n    </FeatureFlag>\\n  </div>\\n)\\n\\nexport default Home\\n\")), mdx(\"p\", null, \"An advatage of this method is that you get to customize the name of the enabled flag so you avoid prop name collisions like in the higher order component, and you can also avoid re-rendering the entire component which would happen when using the hook. However, many people find this less readable so we provide all the options.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"title":"Feature Flags","slug":"/framework/api/feature-flags/"}}},"pageContext":{"slug":"/framework/api/feature-flags/"}},"staticQueryHashes":["3276690975"]}