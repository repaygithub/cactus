{"componentChunkName":"component---src-templates-generic-template-tsx","path":"/theme/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 3\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Cactus Theme\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@repay/cactus-theme\"), \" library exports a theme generator which will create a theme that can be used with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \" component to share that theme with each child component within it.\"), mdx(\"h2\", null, \"Quick Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/repaygithub/cactus/tree/master/modules/cactus-theme\"\n  }, \"Source Code\"))), mdx(\"h2\", null, \"ThemeProvider\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/styled-components\"\n  }, \"styled-components\"), \" package created the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \" component, and we recommend that you check their documentation out for even more clarity.\"), mdx(\"h2\", null, \"Usage\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@repay/cactus-theme\"), \" library exports a theme generator function, and a default theme.\"), mdx(\"h3\", null, \"Default Theme\"), mdx(\"p\", null, \"The default theme that is exported is REPAY\\u2019s theme and can be used out of the box.\"), mdx(\"h4\", null, \"Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import cactusTheme from '@repay/cactus-theme'\\n...\\n<ThemeProvider theme={cactusTheme}>\\n  ...\\n</ThemeProvider>\\n\")), mdx(\"h3\", null, \"generateTheme\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"generateTheme()\"), \" function accepts an options object containing either a primary hue or a primary color, which is then used to generate the rest of the theme and the color scheme. If you don\\u2019t provide an options object, the function will default to the REPAY theme. The options object should be structured as on of the following:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Attr\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"primaryHue\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Integer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A value for the hue of the color scheme. This will determine the colors available in the theme.\")))), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Attr\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"primary\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"hexcode string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A hexcode color to define the main \\u201Cbase\\u201D color. This will determine the colors available in the theme.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"secondary\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"hexcode string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A hexcode color to define the \\u201Caction\\u201D color.\")))), mdx(\"p\", null, \"If only a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"primary\"), \" color is provided or the secondary color is white, the theme will be entirely based on the one color. If the primary color is black, there is a special \\u201Cblack\\u201D theme which provides a blue \\u201Caction\\u201D color.\"), mdx(\"h4\", null, \"Example using primary hue\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { generateTheme } from '@repay/cactus-theme'\\nimport { StyleProvider } from '@repay/cactus-web'\\nconst myTheme = generateTheme({ primaryHue: 150 })\\n\\nexport default () => (\\n  <StyleProvider theme={myTheme}>\\n    {*/ elements rendered here /*}\\n  </StyleProvider>\\n)\\n\")), mdx(\"h4\", null, \"Example using hexcode colors\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { generateTheme } from '@repay/cactus-theme'\\nimport { StyleProvider } from '@repay/cactus-web'\\nconst myTheme = generateTheme({ primary: '#133337', secondary: '#cca398' })\\n\\nexport default () => (\\n  <StyleProvider theme={myTheme}>\\n    {*/ elements rendered here /*}\\n  </StyleProvider>\\n)\\n\")), mdx(\"h2\", null, \"Next Steps\"), mdx(\"p\", null, \"Seems pretty easy, right? Well, we can\\u2019t stop here. To see how you can use the components available in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@repay/cactus-web\"), \" in conjunction with the theming principles we just went over in order to create a consistent and great looking front end application, click \", mdx(\"a\", {\n    to: \"/components\"\n  }, \"here\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"title":"Cactus Theme","slug":"/theme/"}}},"pageContext":{"slug":"/theme/"}},"staticQueryHashes":["3276690975"]}