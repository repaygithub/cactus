{
    "componentChunkName": "component---src-templates-generic-template-tsx",
    "path": "/internationalization/api-documentation/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"API Docs\",\n  \"order\": 3\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Internationalization API Documentation\"), mdx(\"h2\", null, \"BaseI18nController\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BaseI18nController\"), \" class is designed to control the internationalization by loading resources for a given language, and utilizing Project Fluent\\u2019s formatting\\ncapabilities to provide translations for an application. There are a few pieces of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BaseI18nController\"), \" class to take note of here:\"), mdx(\"h3\", null, \"Load\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load\"), \" function is what will load your translations into the controller. You must extend \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BaseI18nController\"), \" in order to provide an implementation of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load\"), \" function.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The developer is responsible for handling failures when loading resources in the load function. (e.g. retry loading, or loading from an alternate source)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can either handle the error within the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"load\"), \" method, or return a rejected Promise and handle the error in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onLoad\"), \" method or an error listener.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The return value is a Promise that resolves to an object with one required and one optional property:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"resources\"), \" is an array of Fluent translation strings; you can also put instances of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FluentResource\"), \" class, or the return value of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"loadRef\"), \" method (more below). The array is combined such that if the same Fluent translation key exists in two of the resources, the later resource will override the earlier one.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"version\"), \" if present should be a number indicating the version of the translations. This is tracked per section, and if (when reloading a section) the returned version is less than the current version, the translations will not be updated.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"load\"), \" function accepts two arguments: an object that represents the section being loaded, and an options object. The section info argument has following properties:\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lang\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The language that should be loaded\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"section\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The section of the app that the controller should be loading translations for\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The options object is completely customizable for your use case: for instance, if you have a mix of hard-coded and stored-in-database translations, you might set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"options.dynamic = true\"), \" to tell the loader it should look in the DB for a particular section.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There are two \\u201Cbuilt-in\\u201D options that are useless in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"load\"), \" but can be passed to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_load\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"I18nSection\"), \":\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"loader\"), \" is a function that replaces the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"load\"), \" method; it can be used if you have a section with a very different loading mechanism than the rest, and you don\\u2019t want to special case it in your controller class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onLoad\"), \" is a function that is called once the section is loaded (or an error occurred while loading). It takes three arguments: the section info object, the state the section was in before loading (usually \\u201Cnew\\u201D, but could be \\u201Cerror\\u201D if you\\u2019re retrying), and the error (if there was one). The default \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onLoad\"), \" behavior is to call any listeners that have been set on the controller.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Both functions bind \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"this\"), \" to the controller when called, which can enable you to keep the default behavior and just do something custom on the side:\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Add an extra translation source on top of the normal ones:\\nconst loader = async (sectionInfo, opts) => {\\n  const { resources } = await this.load(sectionInfo, opts)\\n  const ftl = getSuperSpecialTranslations(sectionInfo)\\n  return { resources: [...resources, ftl] }\\n}\\n\\n// Do some custom onLoad logic, but still call the controller's listeners:\\nconst onLoad = (sectionInfo, prevState, error) => {\\n  doCustomLogic()\\n  this.onLoad(sectionInfo, prevState, error)\\n}\\n\")), mdx(\"h3\", null, \"LoadRef\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loadRef\"), \" function is meant as a supplement to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load\"), \" for specific use cases. Say you have some common translations that appear on multiple pages. They\\u2019re not quite global enough to wrap the entire app in an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I18nSection\"), \", but it\\u2019s also inconvenient to put a section everyplace they\\u2019re used; instead, you can include those translations as a reference. The \\u201Ccommon\\u201D section will only be loaded once, but can be referenced by as many other sections as needed:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"load(sectionInfo, opts) {\\n  const resources = []\\n  if (needsCommonTranslations(sectionInfo.section)) {\\n    resources.push(this.loadRef(sectionInfo, 'common', opts))\\n  }\\n  resources.push(getTranslations(sectionInfo.section, sectionInfo.lang))\\n  return Promise.resolve({ resources })\\n}\\n\")), mdx(\"p\", null, \"Another use case could be if you have two languages that are mostly the same with only a few differences, like en-US and en-GB: one language can include a ref to the other, and only the Fluent keys that are actually different need to be overridden.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Argument\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"referrer\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The object that was received as the first argument to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"load\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"section\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The section to be included as a reference\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"loadOpts\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The options that were passed as the second argument to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"load\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lang\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The language of the reference section (defaults to same as referrer)\")))), mdx(\"h4\", null, \"Example\"), mdx(\"p\", null, \"All values in a section\\u2019s resource array are combined into a single Fluent bundle; this not only serves as a lookup fallback mechanism (where you can have a section with default values, and then override them), but also allows referencing messages in other sections. For example, a greeting lookup:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// Section \\\"user\\\", generated dynamically from user preferences\\n-title = mister\\n-title-short = Mr.\\n\\n// Section \\\"welcome\\\"/en-US, references section \\\"user\\\"\\n-color = color\\nwelcome = Welcome, { -title-short } { $name }! Pick a { -color } for your background:\\n\\n// Section \\\"welcome\\\"/en-GB, references \\\"welcome\\\"/en-US\\n-color = colour\\n\")), mdx(\"p\", null, \"Rendering the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"welcome\"), \" message in British English with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$name=John\"), \" would yield \\u201CWelcome, Mr. John! Pick a colour for your background:\\u201C.\"), mdx(\"h3\", null, \"Get\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \" function will search for the requested translation. It searches through all matching languages (see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.projectfluent.org/fluent.js/langneg/#matching\"\n  }, \"language matching\"), \"), plus the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultLang\"), \" if there is one. It accepts a single object argument with the following properties:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lang\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Override the controller\\u2019s current language\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"section\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The section to search in\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ID of the message (see \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"getKey\"), \" method)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"args\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Used to resolve variables in the translations\")))), mdx(\"p\", null, \"The return value is always an object with three properties:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"text\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Str/null\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The main line from the Fluent translation, null if empty or no translation found\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"attrs\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Any attrs included with the translation\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"found\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Indicates if a translation was found or not\")))), mdx(\"h3\", null, \"getKey\"), mdx(\"p\", null, \"In some cases the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" you pass into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \" may not be the same as the Fluent translation key. In that case, you can override the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getKey\"), \" method to transform the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" into the correct format. This mostly exists for backwards compatibility, because in previous versions the key format was hardcoded:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// Implementation to maintain the old key format.\\ngetKey(id, section, lang) {\\n  return section === 'global' ? id : `${section}__${id}`\\n}\\n\")), mdx(\"p\", null, \"Other use cases might be if you use IDs that contain invalid Fluent characters like \\u201D.\\u201D and you need to sanitize the ID before passing it to Fluent.\"), mdx(\"h3\", null, \"GetText\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getText\"), \" has the same purpose and arguments as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \", but only returns the main message (or null).\"), mdx(\"h3\", null, \"HasText\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hasText\"), \" returns the same as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get\"), \" method\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"found\"), \" property. It has the same arguments, except it doesn\\u2019t take the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"args\"), \" variables (because it doesn\\u2019t actually do any translating).\"), mdx(\"h3\", null, \"Constructor\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BaseI18nController\"), \" constructor accepts a single options object with the following properties:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"supportedLangs\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String[]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A list of all languages the application supports\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"defaultLang\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The default & fallback language; if not given, then \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lang\"), \" becomes a required argument\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lang\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The current language that should be rendered; defaults to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"defaultLang\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"debugMode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A flag to indicate whether or not certain console warnings should be displayed; default \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"useIsolating\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Passed directly to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"FluentBundle\"), \" class; default \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" for using bidi isolation marks\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"functions\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Passed directly to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"FluentBundle\"), \" class; provide custom functions to use in Fluent translations\")))), mdx(\"h3\", null, \"Extending The Base\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"class I18nController extends BaseI18nController {\\n  // Minimum implementation with required load() method\\n  load(sectionInfo) {\\n    const { lang, section } = sectionInfo\\n    // Load ftl translations from the source\\n    return import(`./locales/${lang}/${section}.js`)\\n      .then(({ default: ftl }) => ({ resources: [ftl] }))\\n  }\\n}\\n\\nconst controller = new I18nController({\\n  defaultLang: 'en',\\n  supportedLangs: ['en', 'es'],\\n  useIsolating: false,\\n})\\nexport default controller\\n\")), mdx(\"p\", null, \"You may also want to extend other functions based on your needs. This can be done by also using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"super\"), \" keyword to refer to the original method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export const missingKeys = new Set()\\n\\nclass I18nController extends BaseI18nController {\\n  load(args) {\\n    // code to load translations\\n  }\\n\\n  get(args) {\\n    const result = super.get(args)\\n    if (!result.found) {\\n      const key = this.getKey(args.id, args.section, args.lang)\\n      if (!missingKeys.has(key)) {\\n        missingKeys.add(key)\\n      }\\n    }\\n    return result\\n  }\\n}\\n\")), mdx(\"h2\", null, \"I18nProvider\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<I18nProvider />\"), \" component is a top-level component that is used to provide i18n context to the rest of an application.\"), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prop\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"controller\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Used for passing the controller to the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"I18nProvider\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lang\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Used for setting the current language that should be rendered\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"section\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Sets a default section for the entire app; default \\u201Cglobal\\u201D\")))), mdx(\"p\", null, \"Unlike \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I18nSection\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I18nProvider\"), \" doesn\\u2019t accept any extra section load arguments, so if you need those (or just don\\u2019t need a default section) you should set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"section=\\\"\\\"\"), \".\"), mdx(\"h3\", null, \"Example Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import I18nProvider from '@repay/cactus-i18n'\\nimport i18nController from './I18nController'\\n...\\nreturn (\\n  <I18nProvider controller={i18nController} lang=\\\"es\\\">\\n    ...\\n  </I18nProvider>\\n)\\n\")), mdx(\"p\", null, \"In the browser, it is recommended to use the user provided language by default but also allow the user to change as desired.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// App.js\\nimport React, { useState } from 'react'\\nimport I18nProvider from '@repay/cactus-i18n'\\nimport i18nController from './I18nController'\\n\\nfunction App(props) {\\n  const [lang, setLang] = useState(navigator.language)\\n\\n  return (\\n    <I18nProvider controller={i18nController} lang={lang}>\\n      <select name=\\\"lang\\\" onChange={event => setLang(event.currentTarget.value)}>\\n        ...\\n        <option value=\\\"es\\\">Espa\\xF1ol</option>\\n      </select>\\n      ...\\n    </I18nProvider>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"I18nSection\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<I18nSection />\"), \" component was designed to allow the translations to be broken up into separate sections and loaded only when a specific section is needed. A section component alone will not render anything; it must be used with other internationalization components like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I18nText\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I18nElement\"), \" in order to render any actual translations. This component is really there to tell any of its children i18n components where to look for translated text. It can also be used to locally change the rendered language, for example in cases where a user wants to present information to another person in the second person\\u2019s language.\"), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prop\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"name\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name of the section to load and use as the default in descendant components\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lang\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Used to override the globally selected language\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"dependencies\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Array<String \", \"|\", \" {}>\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Load additional sections that will be used in descendants, but should not be set as the default section\")))), mdx(\"p\", null, \"Any additional props will be passed as part of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loadOpts\"), \" argument to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"load\"), \" function.\"), mdx(\"h3\", null, \"Example Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { I18nSection } from '@repay/cactus-i18n'\\n...\\nconst sectionComponent = () => {\\n  return (\\n    <I18nSection name=\\\"example\\\">\\n      ...\\n    </I18nSection>\\n  )\\n}\\n\")), mdx(\"p\", null, \"Example with additional section dependencies\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { I18nSection } from '@repay/cactus-i18n'\\n...\\nconst Page = () => {\\n  return (\\n    <I18nSection name=\\\"pageSpecificTranslations\\\" dependencies={['someExtraGlobalTranslations']}>\\n      ...\\n    </I18nSection>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"I18nText\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<I18nText />\"), \" component is used for rendering translated text in an application. It\\u2019s common to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I18nText\"), \" in conjunction with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I18nSection\"), \" component to pull a translation from a certain section. If no section is defined, the default section from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I18nProvider\"), \" will be used.\"), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prop\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"get\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Equivalent to the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\"), \" arg to the controller\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"get\"), \" method\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"args\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Provides a key-value mapping for any variables that should be displayed in a translation\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"section\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Used for overriding the current section to load translations from another\")))), mdx(\"h3\", null, \"Example Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { I18nText, I18nSection } from '@repay/cactus-i18n'\\n...\\n// No section provided; default section will be used\\nconst text = () => {\\n  return (\\n    <I18nText get=\\\"translation-key\\\" args={{ groupName: \\\"example\\\" }} />\\n  )\\n}\\n// Section provided; translations for the \\\"example\\\" section will be loaded\\nconst section = () => {\\n  return (\\n    <I18nSection name=\\\"example\\\">\\n      <I18nText get=\\\"translation-key\\\" args={{ groupName: \\\"example\\\" }} />\\n    </I18nSection>\\n  )\\n}\\n// Section overridden; translation for \\\"translation-key\\\" from \\\"my-section\\\" will be rendered instead\\n// NOTE: the \\\"my-section\\\" should be loaded separately because the text element will not trigger a load\\nconst override = () => {\\n  return (\\n    <I18nSection name=\\\"example\\\">\\n      ...\\n      <I18nText get=\\\"translation-key\\\" section=\\\"my-section\\\" args={{ groupName: \\\"example\\\" }} />\\n    </I18nSection>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"I18nElement\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<I18nElement />\"), \" component was created to allow translations to be rendered as DOM elements with support for attributes in an ftl translation. It\\u2019s common to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I18nElement\"), \" component in conjunction with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I18nSection\"), \" component to pull a translation from a certain section. If no section is defined, the default section from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"I18nProvider\"), \" will be used.\"), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prop\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"get\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Equivalent to the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\"), \" arg to the controller\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"get\"), \" method\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"args\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Provides a key-value mapping for any variables that should be displayed in a translation\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"section\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Used for overriding the current section to load translations from another\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"as\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Tells the component what type of dom element should be rendered\")))), mdx(\"h3\", null, \"Example Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { I18nElement, I18nSection } from '@repay/cactus-i18n'\\n...\\n// No section provided; default section will be used\\nconst element = () => {\\n  return (\\n    <I18nElement as=\\\"div\\\" get=\\\"translation-key\\\" args={{ groupName: \\\"example\\\" }} />\\n  )\\n}\\n// Section provided; translations for the \\\"example\\\" section will be loaded\\nconst section = () => {\\n  return (\\n    <I18NSection name=\\\"example\\\">\\n      <I18nElement as={Text} get=\\\"translation-key\\\" args={{ groupName: \\\"example\\\" }} />\\n    </I18NSection>\\n  )\\n}\\n// Section overridden; translations for \\\"my-section\\\" will be used\\nconst override = () => {\\n  return (\\n    <I18nSection name=\\\"example\\\">\\n      ...\\n      <I18nElement as=\\\"div\\\" get=\\\"translation-key\\\" section=\\\"my-section\\\" args={{ groupName: \\\"example\\\" }} />\\n    </I18nSection>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"I18nFormatted\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<I18nFormatted />\"), \" component can be used to carry out any custom formatting on the translations by providing a formatter function to the component. You can\\nwrite your formatter function such that it returns a formatted string or a DOM element.\"), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prop\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"get\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Equivalent to the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\"), \" arg to the controller\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"get\"), \" method\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"args\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Provides a key-value mapping for any variables that should be displayed in a translation\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"section\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Used for overriding the current section to load translations from another\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"formatter\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function to do any extra formatting\")))), mdx(\"h3\", null, \"Example Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { I18nFormatted } from '@repay/cactus-i18n'\\n...\\nconst formatter = text => {\\n  // Carry out any extra formatting necessary\\n  return <div>text.split('').reverse().join('')</div>\\n}\\nconst formatted = () => {\\n  return (\\n    <I18nFormatted get=\\\"translation-key\\\" formatter={formatter} args={{ format: \\\"reversed\\\" }} />\\n  )\\n}\\n\")), mdx(\"h2\", null, \"I18nResource\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<I18nResource />\"), \" component is used to access the message and attributes when inside the render function of a class component. It can also allow using translated text as arguments for other messages.\"), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prop\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"get\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Equivalent to the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\"), \" arg to the controller\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"get\"), \" method\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"args\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Provides a key-value mapping for any variables that should be displayed in a translation\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"section\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Used for overriding the current section to load translations from another\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"RenderFunc\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A function that receives message and attributes and returns React elements\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"render\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"RenderFunc\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A function that receives message and attributes and returns React elements\")))), mdx(\"p\", null, \"Either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render\"), \" must be provided to the element or it will render \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"type RenderFunc = (message: string, attributes?: object | null) => React.ReactNode\\n\")), mdx(\"h3\", null, \"Example Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import * as React from 'react'\\nimport { I18nResource } from '@repay/cactus-i18n'\\n\\nclass BigComponent extends React.Component {\\n  // state management functions\\n  render() {\\n    // some calculations\\n    return (\\n      <div>\\n        {/* Other react elements */}\\n        <I18nResource get=\\\"translation-key\\\">\\n          {(message, attrs) => <h1 {...attrs}>{message}</h1>}\\n        </I18nResource>\\n      </div>\\n    )\\n  }\\n}\\n\")), mdx(\"h2\", null, \"useI18nText & useI18nResource\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useI18nText\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useI18nResource\"), \" are functions that have been exported to allow you to hook into the internationalization context, and get translations directly, if necessary. They function similarly, but the difference is what gets returned. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useI18nText\"), \" will return \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"only\"), \" the text for a given translation, while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useI18nResource\"), \" will not only return the text of the translation, but any attributes defined in the ftl for that translation as well. Take the following ftl for instance:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// ftl translation\\nftl = `\\nwelcome-message = Welcome, { $user }\\n  .aria-label = Greetings\\n`\\n\")), mdx(\"p\", null, \"The translation has an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" attribute associated with it, meaning you could call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useI18nResource\"), \" to get the translation \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"and\"), \" the aria-label that goes with it.\"), mdx(\"h3\", null, \"Parameters\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Param\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Required\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Y\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Tells the component which translation to look for in the loaded section\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"args\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Provides a key-value mapping for any variables that should be displayed in a translation\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"section\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Used for overriding the current section to load translations from another\")))), mdx(\"h3\", null, \"Example Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { useI18nText, useI18nResource } from '@repay/cactus-i18n'\\n...\\n// \\\"Welcome, CS Human\\\"\\nconst message = useI18nText('welcome-message', { user: 'CS Human' })\\n// { text: \\\"Welcome, CS Human\\\", attrs: { aria-label: \\\"Greetings\\\" }, found: true }\\nconst { text, attrs, found } = useI18nResource('welcome-message', { user: 'CS Human' })\\n\")), mdx(\"h2\", null, \"Testing\"), mdx(\"p\", null, \"Fluent supports BiDi text by default by wrapping provided values (placeables) in bi-directional unicode characters, specifically the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"First Strong Isolate\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Pop Directional Isolate\"), \" characters. To test exact text matches you must account for these extra characters.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Assume the following global section:\\n`\\nkey-for-the-group= We are the { $groupName }!\\n`\\n...\\nconst translatedText = controller.get({ section: 'global', id: 'key-for-the-group', args: { groupName: 'people' } })\\nexpect(translatedText).toBe('We are the \\\\u2068people\\\\u2069!')\\nexpect(translatedText).toMatch(/We are the .people.!/)\\n\")), mdx(\"p\", null, \"For more information on these characters and why they are necessary, see Mozilla\\u2019s explainer on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Localization/Unicode_Bidirectional_Text_Algorithm\"\n  }, \"Unicode Bidirectional Algorithm\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"title":"API Docs","slug":"/internationalization/api-documentation/"}}},"pageContext":{"slug":"/internationalization/api-documentation/"}},
    "staticQueryHashes": ["3276690975"]}