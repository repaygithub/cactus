{"version":3,"sources":["webpack:///./src/helpers/iconGroups.ts","webpack:///./src/pages/icons/available-icons.tsx","webpack:///./src/components/Text.tsx"],"names":["iconsCategoryMap","Object","entries","iconsList","filter","fullName","Icon","path","replace","toLowerCase","split","category","name","join","hasOwnProperty","push","categories","keys","sort","Code","styled","code","Pre","pre","p","theme","space","colors","lightGray","importFromRootCode","trim","importIndividually","title","as","fontSize","map","cat","iconList","key","style","textTransform","flexWrap","justifyContent","m","flexBasis","flexDirection","alignItems","Text","color","colorStyle","fontFamily","fontWeight","textAlign","fontStyle","lineHeight","letterSpacing","Span","withComponent"],"mappings":"ibAcA,IAJA,IAIA,EAJMA,EAAoD,GAI1D,E,stBAAA,CAFcC,OAAOC,QAAQC,GAAWC,QAAO,kBAAqB,cAArB,WAE/C,aAAsC,eAA1BC,EAA0B,KAAhBC,EAAgB,KAC9BC,EAAOF,EAASG,QAAQ,aAAc,SAASC,cADjB,EAELF,EAAKG,MAAM,KAAnCC,EAF6B,KAG9BC,EAH8B,WAGfC,KAAK,KACrBb,EAAiBc,eAAeH,KACnCX,EAAiBW,GAAY,IAE/BX,EAAiBW,GAAUI,KAAK,CAC9BH,OACAP,WACAE,OACAI,WACAL,SAIJ,IAAMU,EAAaf,OAAOgB,KAAKjB,GAAkBkB,Y,0ZC9BjD,4FAQMC,EAAOC,UAAOC,KAAV,wEAAGD,CAAH,yCAKJE,EAAMF,UAAOG,IAAV,uEAAGH,CAAH,8DACI,SAAAI,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MACV,SAAAF,GAAC,OAAIA,EAAEC,MAAME,OAAOC,aAIpCC,EAAqB,uNAUzBC,OAEIC,EAAqB,oRAWzBD,OAEa,4BACb,gCACE,gBAAC,IAAD,CAAQE,MAAM,oBACd,gBAAC,IAAD,CAAMC,GAAG,KAAKC,SAAS,MAAvB,mBAGA,gBAAC,IAAD,+EACA,gBAAC,IAAD,+BACA,gBAACZ,EAAD,KAAMO,GACN,gBAAC,IAAD,mCACA,gBAACP,EAAD,KAAMS,GACN,gBAAC,IAAD,2GAICf,IAAWmB,KAAI,SAAAC,GACd,IAAMC,EAAWrC,IAAiBoC,GAClC,OACE,gBAAC,WAAD,CAAgBE,IAAKF,GACnB,gBAAC,IAAD,CAAMH,GAAG,KAAKC,SAAS,KAAKK,MAAO,CAAEC,cAAe,eACjDJ,GAEH,gBAAC,IAAD,CAAMK,SAAS,OAAOC,eAAe,SAClCL,EAASF,KAAI,gBAAG9B,EAAH,EAAGA,SAAUE,EAAb,EAAaA,KAAMD,EAAnB,EAAmBA,KAAnB,OACZ,gBAAC,IAAD,CAAMgC,IAAK/B,EAAMoC,EAAG,EAAGC,UAAU,OAAOC,cAAc,SAASC,WAAW,UACxE,gBAACxC,EAAD,CAAMiC,MAAO,CAAEL,SAAU,UACzB,gBAAC,IAAD,CAAMS,EAAG,EAAGT,SAAS,QAClB7B,GAEH,gBAACc,EAAD,WAAUZ,e,0GCrCpBwC,EAAO3B,kBAAO,KAAV,uDAAGA,CACXM,IACAQ,IACAc,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAGWC,EAAOT,EAAKU,cAAc,a,8KAExBV,W","file":"component---src-pages-icons-available-icons-tsx-950e7c6e68bbc851a5dd.js","sourcesContent":["import * as iconsList from '@repay/cactus-icons'\n\ntype IconObject = {\n  name: string\n  fullName: string\n  path: string\n  category: string\n  Icon: React.ComponentType<any>\n}\n\nconst iconsCategoryMap: { [key: string]: IconObject[] } = {}\n\nconst icons = Object.entries(iconsList).filter(([name]) => name !== 'iconSizes')\n\nfor (const [fullName, Icon] of icons) {\n  const path = fullName.replace(/(.)([A-Z])/, '$1-$2').toLowerCase()\n  const [category, ...nameArr] = path.split('-')\n  const name = nameArr.join(' ')\n  if (!iconsCategoryMap.hasOwnProperty(category)) {\n    iconsCategoryMap[category] = []\n  }\n  iconsCategoryMap[category].push({\n    name,\n    fullName,\n    path,\n    category,\n    Icon,\n  })\n}\n\nconst categories = Object.keys(iconsCategoryMap).sort()\n\nexport { iconsCategoryMap, categories }\n","import * as React from 'react'\n\nimport { categories, iconsCategoryMap } from '../../helpers/iconGroups'\nimport { Flex } from '@repay/cactus-web'\nimport Helmet from 'react-helmet'\nimport styled from 'styled-components'\nimport Text from '../../components/Text'\n\nconst Code = styled.code`\n  white-space: nowrap;\n  font-size: 9.6px;\n`\n\nconst Pre = styled.pre`\n  padding: ${p => p.theme.space[4]}px;\n  background-color: ${p => p.theme.colors.lightGray};\n  white-space: pre-line;\n`\n\nconst importFromRootCode = `\nimport * as React from 'react'\nimport { ActionsAdd, ActionsDelete } from '@repay/cactus-icons'\n\nexport default () => (\n  <React.Fragment>\n    <ActionsAdd />\n    <ActionsDelete />\n  </React.Fragment>\n)\n`.trim()\n\nconst importIndividually = `\nimport * as React from 'react'\nimport ActionsAdd from '@repay/cactus-icons/i/actions-add'\nimport ActionsDelete from '@repay/cactus-icons/i/actions-delete'\n\nexport default () => (\n  <React.Fragment>\n    <ActionsAdd />\n    <ActionsDelete />\n  </React.Fragment>\n)\n`.trim()\n\nexport default () => (\n  <>\n    <Helmet title=\"Available Icons\" />\n    <Text as=\"h1\" fontSize=\"h1\">\n      Available Icons\n    </Text>\n    <Text>The icon library allows icons to be imported in two different manners.</Text>\n    <Text>From the root by name:</Text>\n    <Pre>{importFromRootCode}</Pre>\n    <Text>Individually by file path:</Text>\n    <Pre>{importIndividually}</Pre>\n    <Text>\n      See below for the list of available icons and the names and paths by which they can be\n      referenced.\n    </Text>\n    {categories.map(cat => {\n      const iconList = iconsCategoryMap[cat]\n      return (\n        <React.Fragment key={cat}>\n          <Text as=\"h3\" fontSize=\"h3\" style={{ textTransform: 'capitalize' }}>\n            {cat}\n          </Text>\n          <Flex flexWrap=\"wrap\" justifyContent=\"start\">\n            {iconList.map(({ fullName, path, Icon }) => (\n              <Flex key={path} m={4} flexBasis=\"64px\" flexDirection=\"column\" alignItems=\"center\">\n                <Icon style={{ fontSize: '40px' }} />\n                <Text m={0} fontSize=\"12px\">\n                  {fullName}\n                </Text>\n                <Code>/i/{path}</Code>\n              </Flex>\n            ))}\n          </Flex>\n        </React.Fragment>\n      )\n    })}\n  </>\n)\n","import {\n  color,\n  ColorProps,\n  colorStyle,\n  ColorStyleProps,\n  fontFamily,\n  FontFamilyProps,\n  fontSize,\n  FontSizeProps,\n  fontStyle,\n  FontStyleProps,\n  fontWeight,\n  FontWeightProps,\n  letterSpacing,\n  LetterSpacingProps,\n  lineHeight,\n  LineHeightProps,\n  space,\n  SpaceProps,\n  textAlign,\n  TextAlignProps,\n} from 'styled-system'\nimport styled from 'styled-components'\n\ninterface TextProps\n  extends SpaceProps,\n    FontSizeProps,\n    ColorProps,\n    ColorStyleProps,\n    FontFamilyProps,\n    FontWeightProps,\n    TextAlignProps,\n    FontStyleProps,\n    LineHeightProps,\n    LetterSpacingProps {}\n\nconst Text = styled('p')<TextProps>(\n  space,\n  fontSize,\n  color,\n  colorStyle,\n  fontFamily,\n  fontWeight,\n  textAlign,\n  fontStyle,\n  lineHeight,\n  letterSpacing\n)\n\nexport const Span = Text.withComponent('span')\n\nexport default Text\n"],"sourceRoot":""}