{"version":3,"sources":["webpack:///../node_modules/color-convert/conversions.js","webpack:///../node_modules/color/index.js","webpack:///../node_modules/color-string/index.js","webpack:///../node_modules/color-string/node_modules/color-name/index.js","webpack:///../node_modules/simple-swizzle/index.js","webpack:///../node_modules/simple-swizzle/node_modules/is-arrayish/index.js","webpack:///../node_modules/color-convert/index.js","webpack:///../node_modules/color-name/index.js","webpack:///../node_modules/color-convert/route.js"],"names":["cssKeywords","__webpack_require__","reverseKeywords","key","hasOwnProperty","convert","module","exports","rgb","channels","labels","hsl","hsv","hwb","cmyk","xyz","lab","lch","hex","keyword","ansi16","ansi256","hcg","apple","gray","model","Error","length","Object","defineProperty","value","h","l","r","g","b","min","Math","max","delta","rdif","gdif","bdif","s","v","diff","diffc","c","k","reversed","currentClosestKeyword","x","y","currentClosestDistance","Infinity","distance","pow","z","t1","t2","t3","val","i","smin","lmin","hi","floor","f","p","q","t","sl","vmin","n","wh","bl","ratio","m","y2","x2","z2","a","atan2","PI","sqrt","hr","cos","sin","args","arguments","round","ansi","color","mult","rem","string","toString","toUpperCase","substring","match","colorString","split","map","char","join","integer","parseInt","hue","chroma","mg","pure","w","_slice","slice","skippedModels","hashedModelKeys","keys","forEach","call","sort","limiters","Color","obj","this","valpha","result","get","newArr","zeroArray","splice","indexOf","alpha","hashedKeys","JSON","stringify","push","limit","freeze","getset","channel","modifier","Array","isArray","maxfn","arr","prototype","toJSON","places","self","to","concat","percentString","percent","array","object","unitArray","unitObject","num","Number","toFixed","roundTo","roundToPlace","red","green","blue","saturationl","lightness","saturationv","white","wblack","cyan","magenta","yellow","black","rgbNumber","luminosity","lum","chan","contrast","color2","lum1","lum2","level","contrastRatio","isDark","isLight","negate","lighten","darken","saturate","desaturate","whiten","blacken","grayscale","fade","opaquer","rotate","degrees","mix","mixinColor","weight","color1","undefined","w1","w2","newAlpha","raw","colorNames","swizzle","reverseNames","name","cs","clamp","hexDouble","str","toLowerCase","hexAlpha","i2","parseFloat","isNaN","rgba","hsla","hwba","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellowgreen","isArrayish","results","len","arg","wrap","fn","Function","getOwnPropertyDescriptor","constructor","conversions","route","fromModel","routes","toModel","wrappedFn","conversion","wrapRounded","wrapRaw","deriveBFS","graph","models","parent","buildGraph","queue","current","pop","adjacents","adjacent","node","unshift","link","from","wrapConversion","path","cur"],"mappings":"8EACA,IAAAA,EAAkBC,EAAQ,KAM1BC,EAAA,GACA,QAAAC,KAAAH,EACAA,EAAAI,eAAAD,KACAD,EAAAF,EAAAG,OAIA,IAAAE,EAAAC,EAAAC,QAAA,CACAC,IAAA,CAAOC,SAAA,EAAAC,OAAA,OACPC,IAAA,CAAOF,SAAA,EAAAC,OAAA,OACPE,IAAA,CAAOH,SAAA,EAAAC,OAAA,OACPG,IAAA,CAAOJ,SAAA,EAAAC,OAAA,OACPI,KAAA,CAAQL,SAAA,EAAAC,OAAA,QACRK,IAAA,CAAON,SAAA,EAAAC,OAAA,OACPM,IAAA,CAAOP,SAAA,EAAAC,OAAA,OACPO,IAAA,CAAOR,SAAA,EAAAC,OAAA,OACPQ,IAAA,CAAOT,SAAA,EAAAC,OAAA,SACPS,QAAA,CAAWV,SAAA,EAAAC,OAAA,aACXU,OAAA,CAAUX,SAAA,EAAAC,OAAA,YACVW,QAAA,CAAWZ,SAAA,EAAAC,OAAA,aACXY,IAAA,CAAOb,SAAA,EAAAC,OAAA,eACPa,MAAA,CAASd,SAAA,EAAAC,OAAA,qBACTc,KAAA,CAAQf,SAAA,EAAAC,OAAA,WAIR,QAAAe,KAAApB,EACA,GAAAA,EAAAD,eAAAqB,GAAA,CACA,kBAAApB,EAAAoB,IACA,UAAAC,MAAA,8BAAAD,GAGA,gBAAApB,EAAAoB,IACA,UAAAC,MAAA,oCAAAD,GAGA,GAAApB,EAAAoB,GAAAf,OAAAiB,SAAAtB,EAAAoB,GAAAhB,SACA,UAAAiB,MAAA,sCAAAD,GAGA,IAAAhB,EAAAJ,EAAAoB,GAAAhB,SACAC,EAAAL,EAAAoB,GAAAf,cACAL,EAAAoB,GAAAhB,gBACAJ,EAAAoB,GAAAf,OACAkB,OAAAC,eAAAxB,EAAAoB,GAAA,YAAqDK,MAAArB,IACrDmB,OAAAC,eAAAxB,EAAAoB,GAAA,UAAmDK,MAAApB,IAInDL,EAAAG,IAAAG,IAAA,SAAAH,GACA,IAMAuB,EAEAC,EARAC,EAAAzB,EAAA,OACA0B,EAAA1B,EAAA,OACA2B,EAAA3B,EAAA,OACA4B,EAAAC,KAAAD,IAAAH,EAAAC,EAAAC,GACAG,EAAAD,KAAAC,IAAAL,EAAAC,EAAAC,GACAI,EAAAD,EAAAF,EA+BA,OA1BAE,IAAAF,EACAL,EAAA,EACEE,IAAAK,EACFP,GAAAG,EAAAC,GAAAI,EACEL,IAAAI,EACFP,EAAA,GAAAI,EAAAF,GAAAM,EACEJ,IAAAG,IACFP,EAAA,GAAAE,EAAAC,GAAAK,IAGAR,EAAAM,KAAAD,IAAA,GAAAL,EAAA,MAEA,IACAA,GAAA,KAGAC,GAAAI,EAAAE,GAAA,EAUA,CAAAP,EAAA,KARAO,IAAAF,EACA,EACEJ,GAAA,GACFO,GAAAD,EAAAF,GAEAG,GAAA,EAAAD,EAAAF,IAGA,IAAAJ,IAGA3B,EAAAG,IAAAI,IAAA,SAAAJ,GACA,IAAAgC,EACAC,EACAC,EACAX,EACAY,EAEAV,EAAAzB,EAAA,OACA0B,EAAA1B,EAAA,OACA2B,EAAA3B,EAAA,OACAoC,EAAAP,KAAAC,IAAAL,EAAAC,EAAAC,GACAU,EAAAD,EAAAP,KAAAD,IAAAH,EAAAC,EAAAC,GACAW,EAAA,SAAAC,GACA,OAAAH,EAAAG,GAAA,EAAAF,EAAA,IAyBA,OAtBA,IAAAA,EACAd,EAAAY,EAAA,GAEAA,EAAAE,EAAAD,EACAJ,EAAAM,EAAAb,GACAQ,EAAAK,EAAAZ,GACAQ,EAAAI,EAAAX,GAEAF,IAAAW,EACAb,EAAAW,EAAAD,EACGP,IAAAU,EACHb,EAAA,IAAAS,EAAAE,EACGP,IAAAS,IACHb,EAAA,IAAAU,EAAAD,GAEAT,EAAA,EACAA,GAAA,EACGA,EAAA,IACHA,GAAA,IAIA,CACA,IAAAA,EACA,IAAAY,EACA,IAAAC,IAIAvC,EAAAG,IAAAK,IAAA,SAAAL,GACA,IAAAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GAMA,OALAH,EAAAG,IAAAG,IAAAH,GAAA,GAKA,KAJA,MAAA6B,KAAAD,IAAAH,EAAAI,KAAAD,IAAAF,EAAAC,KAIA,KAFAA,EAAA,QAAAE,KAAAC,IAAAL,EAAAI,KAAAC,IAAAJ,EAAAC,OAKA9B,EAAAG,IAAAM,KAAA,SAAAN,GACA,IAMAwC,EANAf,EAAAzB,EAAA,OACA0B,EAAA1B,EAAA,OACA2B,EAAA3B,EAAA,OAWA,aAJA,EAAAyB,GADAe,EAAAX,KAAAD,IAAA,EAAAH,EAAA,EAAAC,EAAA,EAAAC,MACA,EAAAa,IAAA,GAIA,MAHA,EAAAd,EAAAc,IAAA,EAAAA,IAAA,GAGA,MAFA,EAAAb,EAAAa,IAAA,EAAAA,IAAA,GAEA,IAAAA,IAcA3C,EAAAG,IAAAW,QAAA,SAAAX,GACA,IAAAyC,EAAA/C,EAAAM,GACA,GAAAyC,EACA,OAAAA,EAGA,IACAC,EAfAC,EAAAC,EAcAC,EAAAC,IAGA,QAAAnC,KAAAnB,EACA,GAAAA,EAAAI,eAAAe,GAAA,CACA,IAAAW,EAAA9B,EAAAmB,GAGAoC,GAtBAJ,EAsBA3C,EAtBA4C,EAsBAtB,EApBAO,KAAAmB,IAAAL,EAAA,GAAAC,EAAA,MACAf,KAAAmB,IAAAL,EAAA,GAAAC,EAAA,MACAf,KAAAmB,IAAAL,EAAA,GAAAC,EAAA,OAqBAG,EAAAF,IACAA,EAAAE,EACAL,EAAA/B,GAKA,OAAA+B,GAGA7C,EAAAc,QAAAX,IAAA,SAAAW,GACA,OAAAnB,EAAAmB,IAGAd,EAAAG,IAAAO,IAAA,SAAAP,GACA,IAAAyB,EAAAzB,EAAA,OACA0B,EAAA1B,EAAA,OACA2B,EAAA3B,EAAA,OAWA,YAJA,OAJAyB,IAAA,OAAAI,KAAAmB,KAAAvB,EAAA,iBAAAA,EAAA,OAIA,OAHAC,IAAA,OAAAG,KAAAmB,KAAAtB,EAAA,iBAAAA,EAAA,OAGA,OAFAC,IAAA,OAAAE,KAAAmB,KAAArB,EAAA,iBAAAA,EAAA,QAMA,KAHA,MAAAF,EAAA,MAAAC,EAAA,MAAAC,GAGA,KAFA,MAAAF,EAAA,MAAAC,EAAA,MAAAC,KAKA9B,EAAAG,IAAAQ,IAAA,SAAAR,GACA,IAAAO,EAAAV,EAAAG,IAAAO,IAAAP,GACA2C,EAAApC,EAAA,GACAqC,EAAArC,EAAA,GACA0C,EAAA1C,EAAA,GAiBA,OAXAqC,GAAA,IACAK,GAAA,QAEAN,GAJAA,GAAA,QAIA,QAAAd,KAAAmB,IAAAL,EAAA,WAAAA,EAAA,OAQA,CAJA,KAHAC,IAAA,QAAAf,KAAAmB,IAAAJ,EAAA,WAAAA,EAAA,QAGA,GACA,KAAAD,EAAAC,GACA,KAAAA,GAJAK,IAAA,QAAApB,KAAAmB,IAAAC,EAAA,WAAAA,EAAA,WASApD,EAAAM,IAAAH,IAAA,SAAAG,GACA,IAGA+C,EACAC,EACAC,EACApD,EACAqD,EAPA9B,EAAApB,EAAA,OACAgC,EAAAhC,EAAA,OACAqB,EAAArB,EAAA,OAOA,OAAAgC,EAEA,OADAkB,EAAA,IAAA7B,EACA6B,KASAH,EAAA,EAAA1B,GALA2B,EADA3B,EAAA,GACAA,GAAA,EAAAW,GAEAX,EAAAW,EAAAX,EAAAW,GAKAnC,EAAA,QACA,QAAAsD,EAAA,EAAgBA,EAAA,EAAOA,KACvBF,EAAA7B,EAAA,MAAA+B,EAAA,IACA,GACAF,IAEAA,EAAA,GACAA,IAIAC,EADA,EAAAD,EAAA,EACAF,EAAA,GAAAC,EAAAD,GAAAE,EACG,EAAAA,EAAA,EACHD,EACG,EAAAC,EAAA,EACHF,GAAAC,EAAAD,IAAA,IAAAE,GAAA,EAEAF,EAGAlD,EAAAsD,GAAA,IAAAD,EAGA,OAAArD,GAGAH,EAAAM,IAAAC,IAAA,SAAAD,GACA,IAAAoB,EAAApB,EAAA,GACAgC,EAAAhC,EAAA,OACAqB,EAAArB,EAAA,OACAoD,EAAApB,EACAqB,EAAA3B,KAAAC,IAAAN,EAAA,KAUA,OALAW,IADAX,GAAA,IACA,EAAAA,EAAA,EAAAA,EACA+B,GAAAC,GAAA,EAAAA,EAAA,EAAAA,EAIA,CAAAjC,EAAA,KAFA,IAAAC,EAAA,EAAA+B,GAAAC,EAAAD,GAAA,EAAApB,GAAAX,EAAAW,IAEA,MAHAX,EAAAW,GAAA,KAMAtC,EAAAO,IAAAJ,IAAA,SAAAI,GACA,IAAAmB,EAAAnB,EAAA,MACA+B,EAAA/B,EAAA,OACAgC,EAAAhC,EAAA,OACAqD,EAAA5B,KAAA6B,MAAAnC,GAAA,EAEAoC,EAAApC,EAAAM,KAAA6B,MAAAnC,GACAqC,EAAA,IAAAxB,GAAA,EAAAD,GACA0B,EAAA,IAAAzB,GAAA,EAAAD,EAAAwB,GACAG,EAAA,IAAA1B,GAAA,EAAAD,GAAA,EAAAwB,IAGA,OAFAvB,GAAA,IAEAqB,GACA,OACA,OAAArB,EAAA0B,EAAAF,GACA,OACA,OAAAC,EAAAzB,EAAAwB,GACA,OACA,OAAAA,EAAAxB,EAAA0B,GACA,OACA,OAAAF,EAAAC,EAAAzB,GACA,OACA,OAAA0B,EAAAF,EAAAxB,GACA,OACA,OAAAA,EAAAwB,EAAAC,KAIAhE,EAAAO,IAAAD,IAAA,SAAAC,GACA,IAIAoD,EACAO,EACAvC,EANAD,EAAAnB,EAAA,GACA+B,EAAA/B,EAAA,OACAgC,EAAAhC,EAAA,OACA4D,EAAAnC,KAAAC,IAAAM,EAAA,KAYA,OAPAZ,GAAA,EAAAW,GAAAC,EAEA2B,EAAA5B,EAAA6B,EAKA,CAAAzC,EAAA,KAHAwC,GADAA,IAFAP,GAAA,EAAArB,GAAA6B,IAEA,EAAAR,EAAA,EAAAA,IACA,GAGA,KAFAhC,GAAA,KAMA3B,EAAAQ,IAAAL,IAAA,SAAAK,GACA,IAIAiD,EACAlB,EACAuB,EACAM,EAkBAxC,EACAC,EACAC,EA3BAJ,EAAAlB,EAAA,OACA6D,EAAA7D,EAAA,OACA8D,EAAA9D,EAAA,OACA+D,EAAAF,EAAAC,EAyBA,OAlBAC,EAAA,IACAF,GAAAE,EACAD,GAAAC,GAKAT,EAAA,EAAApC,GAFA+B,EAAAzB,KAAA6B,MAAA,EAAAnC,IAIA,MAAA+B,KACAK,EAAA,EAAAA,GAGAM,EAAAC,EAAAP,IAPAvB,EAAA,EAAA+B,GAOAD,GAKAZ,GACA,QACA,OACA,OAAA7B,EAAAW,EAAgBV,EAAAuC,EAAOtC,EAAAuC,EAAQ,MAC/B,OAAAzC,EAAAwC,EAAgBvC,EAAAU,EAAOT,EAAAuC,EAAQ,MAC/B,OAAAzC,EAAAyC,EAAiBxC,EAAAU,EAAOT,EAAAsC,EAAO,MAC/B,OAAAxC,EAAAyC,EAAiBxC,EAAAuC,EAAOtC,EAAAS,EAAO,MAC/B,OAAAX,EAAAwC,EAAgBvC,EAAAwC,EAAQvC,EAAAS,EAAO,MAC/B,OAAAX,EAAAW,EAAgBV,EAAAwC,EAAQvC,EAAAsC,EAGxB,WAAAxC,EAAA,IAAAC,EAAA,IAAAC,IAGA9B,EAAAS,KAAAN,IAAA,SAAAM,GACA,IAAAiC,EAAAjC,EAAA,OACA+D,EAAA/D,EAAA,OACAsC,EAAAtC,EAAA,OACAkC,EAAAlC,EAAA,OASA,YAJA,EAAAuB,KAAAD,IAAA,EAAAW,GAAA,EAAAC,OAIA,KAHA,EAAAX,KAAAD,IAAA,EAAAyC,GAAA,EAAA7B,OAGA,KAFA,EAAAX,KAAAD,IAAA,EAAAgB,GAAA,EAAAJ,SAKA3C,EAAAU,IAAAP,IAAA,SAAAO,GACA,IAGAkB,EACAC,EACAC,EALAgB,EAAApC,EAAA,OACAqC,EAAArC,EAAA,OACA0C,EAAA1C,EAAA,OA0BA,OApBAmB,GAAA,MAAAiB,EAAA,OAAAC,EAAA,MAAAK,EACAtB,EAAA,MAAAgB,GAAA,KAAAC,EAAA,MAAAK,EAGAxB,GALAA,EAAA,OAAAkB,GAAA,OAAAC,GAAA,MAAAK,GAKA,SACA,MAAApB,KAAAmB,IAAAvB,EAAA,YACA,MAAAA,EAEAC,IAAA,SACA,MAAAG,KAAAmB,IAAAtB,EAAA,YACA,MAAAA,EAEAC,IAAA,SACA,MAAAE,KAAAmB,IAAArB,EAAA,YACA,MAAAA,EAMA,MAJAF,EAAAI,KAAAD,IAAAC,KAAAC,IAAA,EAAAL,GAAA,IAIA,KAHAC,EAAAG,KAAAD,IAAAC,KAAAC,IAAA,EAAAJ,GAAA,IAGA,KAFAC,EAAAE,KAAAD,IAAAC,KAAAC,IAAA,EAAAH,GAAA,MAKA9B,EAAAU,IAAAC,IAAA,SAAAD,GACA,IAAAoC,EAAApC,EAAA,GACAqC,EAAArC,EAAA,GACA0C,EAAA1C,EAAA,GAiBA,OAXAqC,GAAA,IACAK,GAAA,QAEAN,GAJAA,GAAA,QAIA,QAAAd,KAAAmB,IAAAL,EAAA,WAAAA,EAAA,OAQA,CAJA,KAHAC,IAAA,QAAAf,KAAAmB,IAAAJ,EAAA,WAAAA,EAAA,QAGA,GACA,KAAAD,EAAAC,GACA,KAAAA,GAJAK,IAAA,QAAApB,KAAAmB,IAAAC,EAAA,WAAAA,EAAA,WASApD,EAAAW,IAAAD,IAAA,SAAAC,GACA,IAGAmC,EACAC,EACAK,EALAzB,EAAAhB,EAAA,GAQAmC,EAPAnC,EAAA,GAOA,KADAoC,GAAApB,EAAA,SAEAyB,EAAAL,EAPApC,EAAA,GAOA,IAEA,IAAA8D,EAAAzC,KAAAmB,IAAAJ,EAAA,GACA2B,EAAA1C,KAAAmB,IAAAL,EAAA,GACA6B,EAAA3C,KAAAmB,IAAAC,EAAA,GASA,OARAL,EAAA0B,EAAA,QAAAA,GAAA1B,EAAA,cACAD,EAAA4B,EAAA,QAAAA,GAAA5B,EAAA,cACAM,EAAAuB,EAAA,QAAAA,GAAAvB,EAAA,cAMA,CAJAN,GAAA,OACAC,GAAA,IACAK,GAAA,UAKApD,EAAAW,IAAAC,IAAA,SAAAD,GACA,IAIAe,EAJAC,EAAAhB,EAAA,GACAiE,EAAAjE,EAAA,GACAmB,EAAAnB,EAAA,GAcA,OARAe,EAAA,IADAM,KAAA6C,MAAA/C,EAAA8C,GACA,EAAA5C,KAAA8C,IAEA,IACApD,GAAA,KAKA,CAAAC,EAFAK,KAAA+C,KAAAH,IAAA9C,KAEAJ,IAGA1B,EAAAY,IAAAD,IAAA,SAAAC,GACA,IAKAoE,EALArD,EAAAf,EAAA,GACA8B,EAAA9B,EAAA,GAUA,OAJAoE,EALApE,EAAA,GAKA,MAAAoB,KAAA8C,GAIA,CAAAnD,EAHAe,EAAAV,KAAAiD,IAAAD,GACAtC,EAAAV,KAAAkD,IAAAF,KAKAhF,EAAAG,IAAAY,OAAA,SAAAoE,GACA,IAAAvD,EAAAuD,EAAA,GACAtD,EAAAsD,EAAA,GACArD,EAAAqD,EAAA,GACA1D,EAAA,KAAA2D,oBAAA,GAAApF,EAAAG,IAAAI,IAAA4E,GAAA,GAIA,QAFA1D,EAAAO,KAAAqD,MAAA5D,EAAA,KAGA,UAGA,IAAA6D,EAAA,IACAtD,KAAAqD,MAAAvD,EAAA,QACAE,KAAAqD,MAAAxD,EAAA,QACAG,KAAAqD,MAAAzD,EAAA,MAMA,OAJA,IAAAH,IACA6D,GAAA,IAGAA,GAGAtF,EAAAO,IAAAQ,OAAA,SAAAoE,GAGA,OAAAnF,EAAAG,IAAAY,OAAAf,EAAAO,IAAAJ,IAAAgF,KAAA,KAGAnF,EAAAG,IAAAa,QAAA,SAAAmE,GACA,IAAAvD,EAAAuD,EAAA,GACAtD,EAAAsD,EAAA,GACArD,EAAAqD,EAAA,GAIA,OAAAvD,IAAAC,OAAAC,EACAF,EAAA,EACA,GAGAA,EAAA,IACA,IAGAI,KAAAqD,OAAAzD,EAAA,eAGA,GACA,GAAAI,KAAAqD,MAAAzD,EAAA,OACA,EAAAI,KAAAqD,MAAAxD,EAAA,OACAG,KAAAqD,MAAAvD,EAAA,QAKA9B,EAAAe,OAAAZ,IAAA,SAAAgF,GACA,IAAAI,EAAAJ,EAAA,GAGA,OAAAI,GAAA,IAAAA,EAOA,OANAJ,EAAA,KACAI,GAAA,KAKA,CAFAA,IAAA,SAEAA,KAGA,IAAAC,EAAA,SAAAL,EAAA,KAKA,QAJA,EAAAI,GAAAC,EAAA,KACAD,GAAA,KAAAC,EAAA,KACAD,GAAA,KAAAC,EAAA,MAKAxF,EAAAgB,QAAAb,IAAA,SAAAgF,GAEA,GAAAA,GAAA,KACA,IAAAzC,EAAA,IAAAyC,EAAA,OACA,OAAAzC,OAKA,IAAA+C,EAKA,OAPAN,GAAA,GAOA,CAJAnD,KAAA6B,MAAAsB,EAAA,UACAnD,KAAA6B,OAAA4B,EAAAN,EAAA,aACAM,EAAA,UAKAzF,EAAAG,IAAAU,IAAA,SAAAsE,GACA,IAIAO,KAJA,IAAA1D,KAAAqD,MAAAF,EAAA,YACA,IAAAnD,KAAAqD,MAAAF,EAAA,UACA,IAAAnD,KAAAqD,MAAAF,EAAA,MAEAQ,SAAA,IAAAC,cACA,eAAAC,UAAAH,EAAApE,QAAAoE,GAGA1F,EAAAa,IAAAV,IAAA,SAAAgF,GACA,IAAAW,EAAAX,EAAAQ,SAAA,IAAAG,MAAA,4BACA,IAAAA,EACA,cAGA,IAAAC,EAAAD,EAAA,GAEA,IAAAA,EAAA,GAAAxE,SACAyE,IAAAC,MAAA,IAAAC,IAAA,SAAAC,GACA,OAAAA,MACGC,KAAA,KAGH,IAAAC,EAAAC,SAAAN,EAAA,IAKA,OAJAK,GAAA,OACAA,GAAA,MACA,IAAAA,IAKApG,EAAAG,IAAAc,IAAA,SAAAd,GACA,IAOAmG,EAPA1E,EAAAzB,EAAA,OACA0B,EAAA1B,EAAA,OACA2B,EAAA3B,EAAA,OACA8B,EAAAD,KAAAC,IAAAD,KAAAC,IAAAL,EAAAC,GAAAC,GACAC,EAAAC,KAAAD,IAAAC,KAAAD,IAAAH,EAAAC,GAAAC,GACAyE,EAAAtE,EAAAF,EAyBA,OAdAuE,EADAC,GAAA,EACA,EAEAtE,IAAAL,GACAC,EAAAC,GAAAyE,EAAA,EAEAtE,IAAAJ,EACA,GAAAC,EAAAF,GAAA2E,EAEA,GAAA3E,EAAAC,GAAA0E,EAAA,EAGAD,GAAA,EAGA,MAFAA,GAAA,GAEA,IAAAC,EAAA,KArBAA,EAAA,EACAxE,GAAA,EAAAwE,GAEA,KAqBAvG,EAAAM,IAAAW,IAAA,SAAAX,GACA,IAAAgC,EAAAhC,EAAA,OACAqB,EAAArB,EAAA,OACAoC,EAAA,EACAoB,EAAA,EAYA,OATApB,EADAf,EAAA,GACA,EAAAW,EAAAX,EAEA,EAAAW,GAAA,EAAAX,IAGA,IACAmC,GAAAnC,EAAA,GAAAe,IAAA,EAAAA,IAGA,CAAApC,EAAA,OAAAoC,EAAA,IAAAoB,IAGA9D,EAAAO,IAAAU,IAAA,SAAAV,GACA,IAAA+B,EAAA/B,EAAA,OACAgC,EAAAhC,EAAA,OAEAmC,EAAAJ,EAAAC,EACAuB,EAAA,EAMA,OAJApB,EAAA,IACAoB,GAAAvB,EAAAG,IAAA,EAAAA,IAGA,CAAAnC,EAAA,OAAAmC,EAAA,IAAAoB,IAGA9D,EAAAiB,IAAAd,IAAA,SAAAc,GACA,IAAAS,EAAAT,EAAA,OACAyB,EAAAzB,EAAA,OACAY,EAAAZ,EAAA,OAEA,OAAAyB,EACA,WAAAb,EAAA,IAAAA,EAAA,IAAAA,GAGA,IAIA2E,EAJAC,EAAA,QACA7C,EAAAlC,EAAA,IACAa,EAAAqB,EAAA,EACA8C,EAAA,EAAAnE,EAGA,OAAAP,KAAA6B,MAAAD,IACA,OACA6C,EAAA,KAAeA,EAAA,GAAAlE,EAAakE,EAAA,KAAa,MACzC,OACAA,EAAA,GAAAC,EAAeD,EAAA,KAAaA,EAAA,KAAa,MACzC,OACAA,EAAA,KAAeA,EAAA,KAAaA,EAAA,GAAAlE,EAAa,MACzC,OACAkE,EAAA,KAAeA,EAAA,GAAAC,EAAaD,EAAA,KAAa,MACzC,OACAA,EAAA,GAAAlE,EAAekE,EAAA,KAAaA,EAAA,KAAa,MACzC,QACAA,EAAA,KAAeA,EAAA,KAAaA,EAAA,GAAAC,EAK5B,OAFAF,GAAA,EAAA9D,GAAAb,EAEA,CACA,KAAAa,EAAA+D,EAAA,GAAAD,GACA,KAAA9D,EAAA+D,EAAA,GAAAD,GACA,KAAA9D,EAAA+D,EAAA,GAAAD,KAIAxG,EAAAiB,IAAAV,IAAA,SAAAU,GACA,IAAAyB,EAAAzB,EAAA,OAGAsB,EAAAG,EAFAzB,EAAA,QAEA,EAAAyB,GACAoB,EAAA,EAMA,OAJAvB,EAAA,IACAuB,EAAApB,EAAAH,GAGA,CAAAtB,EAAA,OAAA6C,EAAA,IAAAvB,IAGAvC,EAAAiB,IAAAX,IAAA,SAAAW,GACA,IAAAyB,EAAAzB,EAAA,OAGAU,EAFAV,EAAA,QAEA,EAAAyB,GAAA,GAAAA,EACAJ,EAAA,EASA,OAPAX,EAAA,GAAAA,EAAA,GACAW,EAAAI,GAAA,EAAAf,GAEAA,GAAA,IAAAA,EAAA,IACAW,EAAAI,GAAA,KAAAf,KAGA,CAAAV,EAAA,OAAAqB,EAAA,IAAAX,IAGA3B,EAAAiB,IAAAT,IAAA,SAAAS,GACA,IAAAyB,EAAAzB,EAAA,OAEAsB,EAAAG,EADAzB,EAAA,QACA,EAAAyB,GACA,OAAAzB,EAAA,QAAAsB,EAAAG,GAAA,OAAAH,KAGAvC,EAAAQ,IAAAS,IAAA,SAAAT,GACA,IAAAkG,EAAAlG,EAAA,OAEA+B,EAAA,EADA/B,EAAA,OAEAkC,EAAAH,EAAAmE,EACA7E,EAAA,EAMA,OAJAa,EAAA,IACAb,GAAAU,EAAAG,IAAA,EAAAA,IAGA,CAAAlC,EAAA,OAAAkC,EAAA,IAAAb,IAGA7B,EAAAkB,MAAAf,IAAA,SAAAe,GACA,OAAAA,EAAA,aAAAA,EAAA,aAAAA,EAAA,eAGAlB,EAAAG,IAAAe,MAAA,SAAAf,GACA,OAAAA,EAAA,aAAAA,EAAA,aAAAA,EAAA,eAGAH,EAAAmB,KAAAhB,IAAA,SAAAgF,GACA,OAAAA,EAAA,WAAAA,EAAA,WAAAA,EAAA,aAGAnF,EAAAmB,KAAAb,IAAAN,EAAAmB,KAAAZ,IAAA,SAAA4E,GACA,WAAAA,EAAA,KAGAnF,EAAAmB,KAAAX,IAAA,SAAAW,GACA,aAAAA,EAAA,KAGAnB,EAAAmB,KAAAV,KAAA,SAAAU,GACA,aAAAA,EAAA,KAGAnB,EAAAmB,KAAAR,IAAA,SAAAQ,GACA,OAAAA,EAAA,SAGAnB,EAAAmB,KAAAN,IAAA,SAAAM,GACA,IAAAqC,EAAA,IAAAxB,KAAAqD,MAAAlE,EAAA,YAGAuE,IAFAlC,GAAA,KAAAA,GAAA,GAAAA,GAEAmC,SAAA,IAAAC,cACA,eAAAC,UAAAH,EAAApE,QAAAoE,GAGA1F,EAAAG,IAAAgB,KAAA,SAAAhB,GAEA,QADAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,MACA,4CCh2BA,IAAA4F,EAAkBnG,EAAQ,KAC1BI,EAAcJ,EAAQ,KAEtB+G,EAAA,GAAAC,MAEAC,EAAA,CAEA,UAGA,OAGA,OAGAC,EAAA,GACAvF,OAAAwF,KAAA/G,GAAAgH,QAAA,SAAA5F,GACA0F,EAAAH,EAAAM,KAAAjH,EAAAoB,GAAAf,QAAA6G,OAAAf,KAAA,KAAA/E,IAGA,IAAA+F,EAAA,GAEA,SAAAC,EAAAC,EAAAjG,GACA,KAAAkG,gBAAAF,GACA,WAAAA,EAAAC,EAAAjG,GAOA,GAJAA,QAAAyF,IACAzF,EAAA,MAGAA,UAAApB,GACA,UAAAqB,MAAA,kBAAAD,GAGA,IAAAqC,EACArD,EAEA,YAAAiH,EACAC,KAAAlG,MAAA,MACAkG,KAAA/B,MAAA,QACA+B,KAAAC,OAAA,OACE,GAAAF,aAAAD,EACFE,KAAAlG,MAAAiG,EAAAjG,MACAkG,KAAA/B,MAAA8B,EAAA9B,MAAAqB,QACAU,KAAAC,OAAAF,EAAAE,YACE,oBAAAF,EAAA,CACF,IAAAG,EAAAzB,EAAA0B,IAAAJ,GACA,UAAAG,EACA,UAAAnG,MAAA,sCAAAgG,GAGAC,KAAAlG,MAAAoG,EAAApG,MACAhB,EAAAJ,EAAAsH,KAAAlG,OAAAhB,SACAkH,KAAA/B,MAAAiC,EAAA/F,MAAAmF,MAAA,EAAAxG,GACAkH,KAAAC,OAAA,iBAAAC,EAAA/F,MAAArB,GAAAoH,EAAA/F,MAAArB,GAAA,OACE,GAAAiH,EAAA/F,OAAA,CACFgG,KAAAlG,SAAA,MACAhB,EAAAJ,EAAAsH,KAAAlG,OAAAhB,SACA,IAAAsH,EAAAf,EAAAM,KAAAI,EAAA,EAAAjH,GACAkH,KAAA/B,MAAAoC,EAAAD,EAAAtH,GACAkH,KAAAC,OAAA,iBAAAF,EAAAjH,GAAAiH,EAAAjH,GAAA,OACE,oBAAAiH,EAEFA,GAAA,SACAC,KAAAlG,MAAA,MACAkG,KAAA/B,MAAA,CACA8B,GAAA,OACAA,GAAA,MACA,IAAAA,GAEAC,KAAAC,OAAA,MACE,CACFD,KAAAC,OAAA,EAEA,IAAAR,EAAAxF,OAAAwF,KAAAM,GACA,UAAAA,IACAN,EAAAa,OAAAb,EAAAc,QAAA,YACAP,KAAAC,OAAA,iBAAAF,EAAAS,MAAAT,EAAAS,MAAA,GAGA,IAAAC,EAAAhB,EAAAG,OAAAf,KAAA,IACA,KAAA4B,KAAAjB,GACA,UAAAzF,MAAA,sCAAA2G,KAAAC,UAAAZ,IAGAC,KAAAlG,MAAA0F,EAAAiB,GAEA,IAAA1H,EAAAL,EAAAsH,KAAAlG,OAAAf,OACAkF,EAAA,GACA,IAAA9B,EAAA,EAAaA,EAAApD,EAAAiB,OAAmBmC,IAChC8B,EAAA2C,KAAAb,EAAAhH,EAAAoD,KAGA6D,KAAA/B,MAAAoC,EAAApC,GAIA,GAAA4B,EAAAG,KAAAlG,OAEA,IADAhB,EAAAJ,EAAAsH,KAAAlG,OAAAhB,SACAqD,EAAA,EAAaA,EAAArD,EAAcqD,IAAA,CAC3B,IAAA0E,EAAAhB,EAAAG,KAAAlG,OAAAqC,GACA0E,IACAb,KAAA/B,MAAA9B,GAAA0E,EAAAb,KAAA/B,MAAA9B,KAKA6D,KAAAC,OAAAvF,KAAAC,IAAA,EAAAD,KAAAD,IAAA,EAAAuF,KAAAC,SAEAhG,OAAA6G,QACA7G,OAAA6G,OAAAd,MA4TA,SAAAe,EAAAjH,EAAAkH,EAAAC,GASA,OARAnH,EAAAoH,MAAAC,QAAArH,KAAA,CAAAA,IAEA4F,QAAA,SAAAxC,IACA2C,EAAA3C,KAAA2C,EAAA3C,GAAA,KAAA8D,GAAAC,IAGAnH,IAAA,GAEA,SAAAoC,GACA,IAAAgE,EAEA,OAAApC,UAAA9D,QACAiH,IACA/E,EAAA+E,EAAA/E,KAGAgE,EAAAF,KAAAlG,MACAmE,MAAA+C,GAAA9E,EACAgE,IAGAA,EAAAF,KAAAlG,KAAAmE,MAAA+C,GACAC,IACAf,EAAAe,EAAAf,IAGAA,IAIA,SAAAkB,EAAAzG,GACA,gBAAAM,GACA,OAAAP,KAAAC,IAAA,EAAAD,KAAAD,IAAAE,EAAAM,KAQA,SAAAoF,EAAAgB,EAAArH,GACA,QAAAmC,EAAA,EAAgBA,EAAAnC,EAAYmC,IAC5B,iBAAAkF,EAAAlF,KACAkF,EAAAlF,GAAA,GAIA,OAAAkF,EAxWAvB,EAAAwB,UAAA,CACAjD,SAAA,WACA,OAAA2B,KAAA5B,UAGAmD,OAAA,WACA,OAAAvB,UAAAlG,UAGAsE,OAAA,SAAAoD,GACA,IAAAC,EAAAzB,KAAAlG,SAAA2E,EAAAiD,GAAA1B,UAAAnH,MAEAgF,EAAA,KADA4D,IAAA1D,MAAA,iBAAAyD,IAAA,IACAvB,OAAAwB,EAAAxD,MAAAwD,EAAAxD,MAAA0D,OAAA3B,KAAAC,QACA,OAAAxB,EAAAiD,GAAAD,EAAA3H,OAAA+D,IAGA+D,cAAA,SAAAJ,GACA,IAAAC,EAAAzB,KAAAnH,MAAAkF,MAAA,iBAAAyD,IAAA,GACA3D,EAAA,IAAA4D,EAAAxB,OAAAwB,EAAAxD,MAAAwD,EAAAxD,MAAA0D,OAAA3B,KAAAC,QACA,OAAAxB,EAAAiD,GAAA7I,IAAAgJ,QAAAhE,IAGAiE,MAAA,WACA,WAAA9B,KAAAC,OAAAD,KAAA/B,MAAAqB,QAAAU,KAAA/B,MAAA0D,OAAA3B,KAAAC,SAGA8B,OAAA,WAKA,IAJA,IAAA7B,EAAA,GACApH,EAAAJ,EAAAsH,KAAAlG,OAAAhB,SACAC,EAAAL,EAAAsH,KAAAlG,OAAAf,OAEAoD,EAAA,EAAiBA,EAAArD,EAAcqD,IAC/B+D,EAAAnH,EAAAoD,IAAA6D,KAAA/B,MAAA9B,GAOA,OAJA,IAAA6D,KAAAC,SACAC,EAAAM,MAAAR,KAAAC,QAGAC,GAGA8B,UAAA,WACA,IAAAnJ,EAAAmH,KAAAnH,MAAAoF,MASA,OARApF,EAAA,QACAA,EAAA,QACAA,EAAA,QAEA,IAAAmH,KAAAC,QACApH,EAAA+H,KAAAZ,KAAAC,QAGApH,GAGAoJ,WAAA,WACA,IAAApJ,EAAAmH,KAAAnH,MAAAkJ,SASA,OARAlJ,EAAAyB,GAAA,IACAzB,EAAA0B,GAAA,IACA1B,EAAA2B,GAAA,IAEA,IAAAwF,KAAAC,SACApH,EAAA2H,MAAAR,KAAAC,QAGApH,GAGAkF,MAAA,SAAAyD,GAEA,OADAA,EAAA9G,KAAAC,IAAA6G,GAAA,KACA,IAAA1B,EAAAE,KAAA/B,MAAAU,IA4OA,SAAA6C,GACA,gBAAAU,GACA,OANA,SAAAA,EAAAV,GACA,OAAAW,OAAAD,EAAAE,QAAAZ,IAKAa,CAAAH,EAAAV,IA9OAc,CAAAd,IAAAG,OAAA3B,KAAAC,QAAAD,KAAAlG,QAGA0G,MAAA,SAAAtE,GACA,OAAA4B,UAAA9D,OACA,IAAA8F,EAAAE,KAAA/B,MAAA0D,OAAAjH,KAAAC,IAAA,EAAAD,KAAAD,IAAA,EAAAyB,KAAA8D,KAAAlG,OAGAkG,KAAAC,QAIAsC,IAAAxB,EAAA,QAAAK,EAAA,MACAoB,MAAAzB,EAAA,QAAAK,EAAA,MACAqB,KAAA1B,EAAA,QAAAK,EAAA,MAEApC,IAAA+B,EAAA,2CAAA7E,GAAqE,OAAAA,EAAA,eAErEwG,YAAA3B,EAAA,QAAAK,EAAA,MACAuB,UAAA5B,EAAA,QAAAK,EAAA,MAEAwB,YAAA7B,EAAA,QAAAK,EAAA,MACAjH,MAAA4G,EAAA,QAAAK,EAAA,MAEAnC,OAAA8B,EAAA,QAAAK,EAAA,MACAvH,KAAAkH,EAAA,QAAAK,EAAA,MAEAyB,MAAA9B,EAAA,QAAAK,EAAA,MACA0B,OAAA/B,EAAA,QAAAK,EAAA,MAEA2B,KAAAhC,EAAA,SAAAK,EAAA,MACA4B,QAAAjC,EAAA,SAAAK,EAAA,MACA6B,OAAAlC,EAAA,SAAAK,EAAA,MACA8B,MAAAnC,EAAA,SAAAK,EAAA,MAEA5F,EAAAuF,EAAA,QAAAK,EAAA,MACA3F,EAAAsF,EAAA,QAAAK,EAAA,MACAtF,EAAAiF,EAAA,QAAAK,EAAA,MAEA/G,EAAA0G,EAAA,QAAAK,EAAA,MACA9D,EAAAyD,EAAA,SACAvG,EAAAuG,EAAA,SAEAvH,QAAA,SAAA0C,GACA,OAAA4B,UAAA9D,OACA,IAAA8F,EAAA5D,GAGAxD,EAAAsH,KAAAlG,OAAAN,QAAAwG,KAAA/B,QAGA1E,IAAA,SAAA2C,GACA,OAAA4B,UAAA9D,OACA,IAAA8F,EAAA5D,GAGAuC,EAAAiD,GAAAnI,IAAAyG,KAAAnH,MAAAkF,QAAAE,QAGAkF,UAAA,WACA,IAAAtK,EAAAmH,KAAAnH,MAAAoF,MACA,WAAApF,EAAA,aAAAA,EAAA,WAAAA,EAAA,IAGAuK,WAAA,WAKA,IAHA,IAAAvK,EAAAmH,KAAAnH,MAAAoF,MAEAoF,EAAA,GACAlH,EAAA,EAAiBA,EAAAtD,EAAAmB,OAAgBmC,IAAA,CACjC,IAAAmH,EAAAzK,EAAAsD,GAAA,IACAkH,EAAAlH,GAAAmH,GAAA,OAAAA,EAAA,MAAA5I,KAAAmB,KAAAyH,EAAA,iBAGA,YAAAD,EAAA,SAAAA,EAAA,SAAAA,EAAA,IAGAE,SAAA,SAAAC,GAEA,IAAAC,EAAAzD,KAAAoD,aACAM,EAAAF,EAAAJ,aAEA,OAAAK,EAAAC,GACAD,EAAA,MAAAC,EAAA,MAGAA,EAAA,MAAAD,EAAA,MAGAE,MAAA,SAAAH,GACA,IAAAI,EAAA5D,KAAAuD,SAAAC,GACA,OAAAI,GAAA,IACA,MAGAA,GAAA,aAGAC,OAAA,WAEA,IAAAhL,EAAAmH,KAAAnH,MAAAoF,MAEA,OADA,IAAApF,EAAA,OAAAA,EAAA,OAAAA,EAAA,QACA,KAGAiL,QAAA,WACA,OAAA9D,KAAA6D,UAGAE,OAAA,WAEA,IADA,IAAAlL,EAAAmH,KAAAnH,MACAsD,EAAA,EAAiBA,EAAA,EAAOA,IACxBtD,EAAAoF,MAAA9B,GAAA,IAAAtD,EAAAoF,MAAA9B,GAEA,OAAAtD,GAGAmL,QAAA,SAAA/G,GACA,IAAAjE,EAAAgH,KAAAhH,MAEA,OADAA,EAAAiF,MAAA,IAAAjF,EAAAiF,MAAA,GAAAhB,EACAjE,GAGAiL,OAAA,SAAAhH,GACA,IAAAjE,EAAAgH,KAAAhH,MAEA,OADAA,EAAAiF,MAAA,IAAAjF,EAAAiF,MAAA,GAAAhB,EACAjE,GAGAkL,SAAA,SAAAjH,GACA,IAAAjE,EAAAgH,KAAAhH,MAEA,OADAA,EAAAiF,MAAA,IAAAjF,EAAAiF,MAAA,GAAAhB,EACAjE,GAGAmL,WAAA,SAAAlH,GACA,IAAAjE,EAAAgH,KAAAhH,MAEA,OADAA,EAAAiF,MAAA,IAAAjF,EAAAiF,MAAA,GAAAhB,EACAjE,GAGAoL,OAAA,SAAAnH,GACA,IAAA/D,EAAA8G,KAAA9G,MAEA,OADAA,EAAA+E,MAAA,IAAA/E,EAAA+E,MAAA,GAAAhB,EACA/D,GAGAmL,QAAA,SAAApH,GACA,IAAA/D,EAAA8G,KAAA9G,MAEA,OADAA,EAAA+E,MAAA,IAAA/E,EAAA+E,MAAA,GAAAhB,EACA/D,GAGAoL,UAAA,WAEA,IAAAzL,EAAAmH,KAAAnH,MAAAoF,MACA/B,EAAA,GAAArD,EAAA,OAAAA,EAAA,OAAAA,EAAA,GACA,OAAAiH,EAAAjH,IAAAqD,QAGAqI,KAAA,SAAAtH,GACA,OAAA+C,KAAAQ,MAAAR,KAAAC,OAAAD,KAAAC,OAAAhD,IAGAuH,QAAA,SAAAvH,GACA,OAAA+C,KAAAQ,MAAAR,KAAAC,OAAAD,KAAAC,OAAAhD,IAGAwH,OAAA,SAAAC,GACA,IAAA1L,EAAAgH,KAAAhH,MACAgG,EAAAhG,EAAAiF,MAAA,GAIA,OAFAe,GADAA,KAAA0F,GAAA,KACA,MAAA1F,IACAhG,EAAAiF,MAAA,GAAAe,EACAhG,GAGA2L,IAAA,SAAAC,EAAAC,GAGA,IAAAD,MAAA/L,IACA,UAAAkB,MAAA,gFAAA6K,GAEA,IAAAE,EAAAF,EAAA/L,MACA2K,EAAAxD,KAAAnH,MACA4D,OAAAsI,IAAAF,EAAA,GAAAA,EAEAzF,EAAA,EAAA3C,EAAA,EACAa,EAAAwH,EAAAtE,QAAAgD,EAAAhD,QAEAwE,IAAA5F,EAAA9B,IAAA,EAAA8B,KAAA9B,IAAA,EAAA8B,EAAA9B,IAAA,KACA2H,EAAA,EAAAD,EAEA,OAAAlF,EAAAjH,IACAmM,EAAAF,EAAAvC,MAAA0C,EAAAzB,EAAAjB,MACAyC,EAAAF,EAAAtC,QAAAyC,EAAAzB,EAAAhB,QACAwC,EAAAF,EAAArC,OAAAwC,EAAAzB,EAAAf,OACAqC,EAAAtE,QAAA/D,EAAA+G,EAAAhD,SAAA,EAAA/D,MAKAxC,OAAAwF,KAAA/G,GAAAgH,QAAA,SAAA5F,GACA,QAAAyF,EAAAgB,QAAAzG,GAAA,CAIA,IAAAhB,EAAAJ,EAAAoB,GAAAhB,SAGAgH,EAAAwB,UAAAxH,GAAA,WACA,GAAAkG,KAAAlG,UACA,WAAAgG,EAAAE,MAGA,GAAAlC,UAAA9D,OACA,WAAA8F,EAAAhC,UAAAhE,GAGA,IA4DAoC,EA5DAgJ,EAAA,iBAAApH,UAAAhF,KAAAkH,KAAAC,OACA,WAAAH,GA2DA5D,EA3DAxD,EAAAsH,KAAAlG,UAAAqL,IAAAnF,KAAA/B,OA4DAiD,MAAAC,QAAAjF,KAAA,CAAAA,IA5DAyF,OAAAuD,GAAApL,IAIAgG,EAAAhG,GAAA,SAAAmE,GAIA,MAHA,iBAAAA,IACAA,EAAAoC,EAAAhB,EAAAM,KAAA7B,WAAAhF,IAEA,IAAAgH,EAAA7B,EAAAnE,OAiEAnB,EAAAC,QAAAkH,uBCheA,IAAAsF,EAAiB9M,EAAQ,KACzB+M,EAAc/M,EAAQ,KAEtBgN,EAAA,GAGA,QAAAC,KAAAH,EACAA,EAAA3M,eAAA8M,KACAD,EAAAF,EAAAG,OAIA,IAAAC,EAAA7M,EAAAC,QAAA,CACA8I,GAAA,GACAvB,IAAA,IAmNA,SAAAsF,EAAAvD,EAAAzH,EAAAE,GACA,OAAAD,KAAAD,IAAAC,KAAAC,IAAAF,EAAAyH,GAAAvH,GAGA,SAAA+K,EAAAxD,GACA,IAAAyD,EAAAzD,EAAA7D,SAAA,IAAAC,cACA,OAAAqH,EAAA3L,OAAA,MAAA2L,IAtNAH,EAAArF,IAAA,SAAA/B,GACA,IACAlC,EACApC,EACA,OAHAsE,EAAAG,UAAA,KAAAqH,eAIA,UACA1J,EAAAsJ,EAAArF,IAAAnH,IAAAoF,GACAtE,EAAA,MACA,MACA,UACAoC,EAAAsJ,EAAArF,IAAAjH,IAAAkF,GACAtE,EAAA,MACA,MACA,QACAoC,EAAAsJ,EAAArF,IAAAtH,IAAAuF,GACAtE,EAAA,MAIA,OAAAoC,EAIA,CAASpC,QAAAK,MAAA+B,GAHT,MAMAsJ,EAAArF,IAAAtH,IAAA,SAAAuF,GACA,IAAAA,EACA,YAGA,IAOAI,EACArC,EACA0J,EAHAhN,EAAA,UAKA,GAAA2F,EAAAJ,EAAAI,MAVA,mCAUA,CAIA,IAHAqH,EAAArH,EAAA,GACAA,IAAA,GAEArC,EAAA,EAAaA,EAAA,EAAOA,IAAA,CAEpB,IAAA2J,EAAA,EAAA3J,EACAtD,EAAAsD,GAAA4C,SAAAP,EAAAc,MAAAwG,IAAA,OAGAD,IACAhN,EAAA,GAAA6B,KAAAqD,MAAAgB,SAAA8G,EAAA,uBAEE,GAAArH,EAAAJ,EAAAI,MAxBF,uBAwBE,CAIF,IAFAqH,GADArH,IAAA,IACA,GAEArC,EAAA,EAAaA,EAAA,EAAOA,IACpBtD,EAAAsD,GAAA4C,SAAAP,EAAArC,GAAAqC,EAAArC,GAAA,IAGA0J,IACAhN,EAAA,GAAA6B,KAAAqD,MAAAgB,SAAA8G,IAAA,uBAEE,GAAArH,EAAAJ,EAAAI,MAjCF,2FAiCE,CACF,IAAArC,EAAA,EAAaA,EAAA,EAAOA,IACpBtD,EAAAsD,GAAA4C,SAAAP,EAAArC,EAAA,MAGAqC,EAAA,KACA3F,EAAA,GAAAkN,WAAAvH,EAAA,SAEE,MAAAA,EAAAJ,EAAAI,MAxCF,8GAgDE,OAAAA,EAAAJ,EAAAI,MA/CF,UAgDA,gBAAAA,EAAA,GACA,WAGA3F,EAAAuM,EAAA5G,EAAA,MAMA3F,EAAA,KAEAA,GALA,KAOA,KAtBA,IAAAsD,EAAA,EAAaA,EAAA,EAAOA,IACpBtD,EAAAsD,GAAAzB,KAAAqD,MAAA,KAAAgI,WAAAvH,EAAArC,EAAA,KAGAqC,EAAA,KACA3F,EAAA,GAAAkN,WAAAvH,EAAA,KAoBA,IAAArC,EAAA,EAAYA,EAAA,EAAOA,IACnBtD,EAAAsD,GAAAsJ,EAAA5M,EAAAsD,GAAA,OAIA,OAFAtD,EAAA,GAAA4M,EAAA5M,EAAA,QAEAA,GAGA2M,EAAArF,IAAAnH,IAAA,SAAAoF,GACA,IAAAA,EACA,YAGA,IACAI,EAAAJ,EAAAI,MADA,uHAGA,GAAAA,EAAA,CACA,IAAAgC,EAAAuF,WAAAvH,EAAA,IAMA,QALAuH,WAAAvH,EAAA,aACAiH,EAAAM,WAAAvH,EAAA,WACAiH,EAAAM,WAAAvH,EAAA,WACAiH,EAAAO,MAAAxF,GAAA,EAAAA,EAAA,MAKA,aAGAgF,EAAArF,IAAAjH,IAAA,SAAAkF,GACA,IAAAA,EACA,YAGA,IACAI,EAAAJ,EAAAI,MADA,mHAGA,GAAAA,EAAA,CACA,IAAAgC,EAAAuF,WAAAvH,EAAA,IAKA,QAJAuH,WAAAvH,EAAA,iBACAiH,EAAAM,WAAAvH,EAAA,WACAiH,EAAAM,WAAAvH,EAAA,WACAiH,EAAAO,MAAAxF,GAAA,EAAAA,EAAA,MAIA,aAGAgF,EAAA9D,GAAAnI,IAAA,WACA,IAAA0M,EAAAZ,EAAAvH,WAEA,MACA,IACA4H,EAAAO,EAAA,IACAP,EAAAO,EAAA,IACAP,EAAAO,EAAA,KACAA,EAAA,KACAP,EAAAhL,KAAAqD,MAAA,IAAAkI,EAAA,KACA,KAIAT,EAAA9D,GAAA7I,IAAA,WACA,IAAAoN,EAAAZ,EAAAvH,WAEA,OAAAmI,EAAAjM,OAAA,OAAAiM,EAAA,GACA,OAAAvL,KAAAqD,MAAAkI,EAAA,SAAAvL,KAAAqD,MAAAkI,EAAA,SAAAvL,KAAAqD,MAAAkI,EAAA,QACA,QAAAvL,KAAAqD,MAAAkI,EAAA,SAAAvL,KAAAqD,MAAAkI,EAAA,SAAAvL,KAAAqD,MAAAkI,EAAA,SAAAA,EAAA,QAGAT,EAAA9D,GAAA7I,IAAAgJ,QAAA,WACA,IAAAoE,EAAAZ,EAAAvH,WAEAxD,EAAAI,KAAAqD,MAAAkI,EAAA,YACA1L,EAAAG,KAAAqD,MAAAkI,EAAA,YACAzL,EAAAE,KAAAqD,MAAAkI,EAAA,YAEA,OAAAA,EAAAjM,OAAA,OAAAiM,EAAA,GACA,OAAA3L,EAAA,MAAAC,EAAA,MAAAC,EAAA,KACA,QAAAF,EAAA,MAAAC,EAAA,MAAAC,EAAA,MAAAyL,EAAA,QAGAT,EAAA9D,GAAA1I,IAAA,WACA,IAAAkN,EAAAb,EAAAvH,WACA,OAAAoI,EAAAlM,OAAA,OAAAkM,EAAA,GACA,OAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,QACA,QAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,QAKAV,EAAA9D,GAAAxI,IAAA,WACA,IAAAiN,EAAAd,EAAAvH,WAEAR,EAAA,GAKA,OAJA6I,EAAAnM,QAAA,OAAAmM,EAAA,KACA7I,EAAA,KAAA6I,EAAA,IAGA,OAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,OAAA7I,EAAA,KAGAkI,EAAA9D,GAAAlI,QAAA,SAAAX,GACA,OAAAyM,EAAAzM,EAAAyG,MAAA,yCC5NA3G,EAAAC,QAAA,CACAwN,UAAA,cACAC,aAAA,cACAC,KAAA,YACAC,WAAA,cACAC,MAAA,cACAC,MAAA,cACAC,OAAA,cACAxD,MAAA,QACAyD,eAAA,cACAlE,KAAA,UACAmE,WAAA,aACAC,MAAA,YACAC,UAAA,cACAC,UAAA,aACAC,WAAA,YACAC,UAAA,aACAC,MAAA,aACAC,eAAA,cACAC,SAAA,cACAC,QAAA,YACAtE,KAAA,YACAuE,SAAA,UACAC,SAAA,YACAC,cAAA,aACAC,SAAA,cACAC,UAAA,UACAC,SAAA,cACAC,UAAA,cACAC,YAAA,YACAC,eAAA,YACAC,WAAA,YACAC,WAAA,aACAC,QAAA,UACAC,WAAA,cACAC,aAAA,cACAC,cAAA,YACAC,cAAA,WACAC,cAAA,WACAC,cAAA,YACAC,WAAA,YACAC,SAAA,aACAC,YAAA,YACAC,QAAA,cACAC,QAAA,cACAC,WAAA,aACAC,UAAA,YACAC,YAAA,cACAC,YAAA,YACAC,QAAA,YACAC,UAAA,cACAC,WAAA,cACAC,KAAA,YACAC,UAAA,aACAxP,KAAA,cACA2I,MAAA,UACA8G,YAAA,aACAC,KAAA,cACAC,SAAA,cACAC,QAAA,cACAC,UAAA,YACAC,OAAA,WACAC,MAAA,cACAC,MAAA,cACAC,SAAA,cACAC,cAAA,cACAC,UAAA,YACAC,aAAA,cACAC,UAAA,cACAC,WAAA,cACAC,UAAA,cACAC,qBAAA,cACAC,UAAA,cACAC,WAAA,cACAC,UAAA,cACAC,UAAA,cACAC,YAAA,cACAC,cAAA,aACAC,aAAA,cACAC,eAAA,cACAC,eAAA,cACAC,eAAA,cACAC,YAAA,cACAC,KAAA,UACAC,UAAA,YACAC,MAAA,cACAnI,QAAA,YACAoI,OAAA,UACAC,iBAAA,cACAC,WAAA,UACAC,aAAA,aACAC,aAAA,cACAC,eAAA,aACAC,gBAAA,cACAC,kBAAA,YACAC,gBAAA,aACAC,gBAAA,aACAC,aAAA,YACAC,UAAA,cACAC,UAAA,cACAC,SAAA,cACAC,YAAA,cACAC,KAAA,UACAC,QAAA,cACAC,MAAA,YACAC,UAAA,aACAC,OAAA,YACAC,UAAA,WACAC,OAAA,cACAC,cAAA,cACAC,UAAA,cACAC,cAAA,cACAC,cAAA,cACAC,WAAA,cACAC,UAAA,cACAC,KAAA,aACAC,KAAA,cACAC,KAAA,cACAC,WAAA,cACAC,OAAA,YACAC,cAAA,aACA9K,IAAA,UACA+K,UAAA,cACAC,UAAA,aACAC,YAAA,YACAC,OAAA,cACAC,WAAA,aACAC,SAAA,YACAC,SAAA,cACAC,OAAA,YACAC,OAAA,cACAC,QAAA,cACAC,UAAA,aACAC,UAAA,cACAC,UAAA,cACAC,KAAA,cACAC,YAAA,YACAC,UAAA,aACAC,IAAA,cACAC,KAAA,YACAC,QAAA,cACAC,OAAA,YACAC,UAAA,aACAC,OAAA,cACAC,MAAA,cACA/L,MAAA,cACAgM,WAAA,cACA5L,OAAA,YACA6L,YAAA,gDCpJA,IAAAC,EAAiBzW,EAAQ,KAEzBqJ,EAAAT,MAAAI,UAAAK,OACArC,EAAA4B,MAAAI,UAAAhC,MAEA+F,EAAA1M,EAAAC,QAAA,SAAAiF,GAGA,IAFA,IAAAmR,EAAA,GAEA7S,EAAA,EAAA8S,EAAApR,EAAA7D,OAAmCmC,EAAA8S,EAAS9S,IAAA,CAC5C,IAAA+S,EAAArR,EAAA1B,GAEA4S,EAAAG,GAEAF,EAAArN,EAAAhC,KAAAqP,EAAA1P,EAAAK,KAAAuP,IAEAF,EAAApO,KAAAsO,GAIA,OAAAF,GAGA3J,EAAA8J,KAAA,SAAAC,GACA,kBACA,OAAAA,EAAA/J,EAAAvH,iCC1BAnF,EAAAC,QAAA,SAAAmH,GACA,SAAAA,GAAA,iBAAAA,KAIAA,aAAAmB,aAAAC,QAAApB,IACAA,EAAA/F,QAAA,IAAA+F,EAAAO,kBAAA+O,UACApV,OAAAqV,yBAAAvP,IAAA/F,OAAA,eAAA+F,EAAAwP,YAAAhK,6BCPA,IAAAiK,EAAkBlX,EAAQ,KAC1BmX,EAAYnX,EAAQ,KAEpBI,EAAA,GAEAuB,OAAAwF,KAAA+P,GAuDA9P,QAAA,SAAAgQ,GACAhX,EAAAgX,GAAA,GAEAzV,OAAAC,eAAAxB,EAAAgX,GAAA,YAAwDvV,MAAAqV,EAAAE,GAAA5W,WACxDmB,OAAAC,eAAAxB,EAAAgX,GAAA,UAAsDvV,MAAAqV,EAAAE,GAAA3W,SAEtD,IAAA4W,EAAAF,EAAAC,GACAzV,OAAAwF,KAAAkQ,GAEAjQ,QAAA,SAAAkQ,GACA,IAAAR,EAAAO,EAAAC,GAEAlX,EAAAgX,GAAAE,GA5CA,SAAAR,GACA,IAAAS,EAAA,SAAAhS,GACA,GAAAA,QACA,OAAAA,EAGAC,UAAA9D,OAAA,IACA6D,EAAAqD,MAAAI,UAAAhC,MAAAK,KAAA7B,YAGA,IAAAoC,EAAAkP,EAAAvR,GAKA,oBAAAqC,EACA,QAAA+O,EAAA/O,EAAAlG,OAAAmC,EAAA,EAAuCA,EAAA8S,EAAS9S,IAChD+D,EAAA/D,GAAAzB,KAAAqD,MAAAmC,EAAA/D,IAIA,OAAA+D,GAQA,MAJA,eAAAkP,IACAS,EAAAC,WAAAV,EAAAU,YAGAD,EAeAE,CAAAX,GACA1W,EAAAgX,GAAAE,GAAAzK,IAlEA,SAAAiK,GACA,IAAAS,EAAA,SAAAhS,GACA,OAAAA,QACAA,GAGAC,UAAA9D,OAAA,IACA6D,EAAAqD,MAAAI,UAAAhC,MAAAK,KAAA7B,YAGAsR,EAAAvR,KAQA,MAJA,eAAAuR,IACAS,EAAAC,WAAAV,EAAAU,YAGAD,EAgDAG,CAAAZ,OAIAzW,EAAAC,QAAAF,oCC3EAC,EAAAC,QAAA,CACAwN,UAAA,cACAC,aAAA,cACAC,KAAA,YACAC,WAAA,cACAC,MAAA,cACAC,MAAA,cACAC,OAAA,cACAxD,MAAA,QACAyD,eAAA,cACAlE,KAAA,UACAmE,WAAA,aACAC,MAAA,YACAC,UAAA,cACAC,UAAA,aACAC,WAAA,YACAC,UAAA,aACAC,MAAA,aACAC,eAAA,cACAC,SAAA,cACAC,QAAA,YACAtE,KAAA,YACAuE,SAAA,UACAC,SAAA,YACAC,cAAA,aACAC,SAAA,cACAC,UAAA,UACAC,SAAA,cACAC,UAAA,cACAC,YAAA,YACAC,eAAA,YACAC,WAAA,YACAC,WAAA,aACAC,QAAA,UACAC,WAAA,cACAC,aAAA,cACAC,cAAA,YACAC,cAAA,WACAC,cAAA,WACAC,cAAA,YACAC,WAAA,YACAC,SAAA,aACAC,YAAA,YACAC,QAAA,cACAC,QAAA,cACAC,WAAA,aACAC,UAAA,YACAC,YAAA,cACAC,YAAA,YACAC,QAAA,YACAC,UAAA,cACAC,WAAA,cACAC,KAAA,YACAC,UAAA,aACAxP,KAAA,cACA2I,MAAA,UACA8G,YAAA,aACAC,KAAA,cACAC,SAAA,cACAC,QAAA,cACAC,UAAA,YACAC,OAAA,WACAC,MAAA,cACAC,MAAA,cACAC,SAAA,cACAC,cAAA,cACAC,UAAA,YACAC,aAAA,cACAC,UAAA,cACAC,WAAA,cACAC,UAAA,cACAC,qBAAA,cACAC,UAAA,cACAC,WAAA,cACAC,UAAA,cACAC,UAAA,cACAC,YAAA,cACAC,cAAA,aACAC,aAAA,cACAC,eAAA,cACAC,eAAA,cACAC,eAAA,cACAC,YAAA,cACAC,KAAA,UACAC,UAAA,YACAC,MAAA,cACAnI,QAAA,YACAoI,OAAA,UACAC,iBAAA,cACAC,WAAA,UACAC,aAAA,aACAC,aAAA,cACAC,eAAA,aACAC,gBAAA,cACAC,kBAAA,YACAC,gBAAA,aACAC,gBAAA,aACAC,aAAA,YACAC,UAAA,cACAC,UAAA,cACAC,SAAA,cACAC,YAAA,cACAC,KAAA,UACAC,QAAA,cACAC,MAAA,YACAC,UAAA,aACAC,OAAA,YACAC,UAAA,WACAC,OAAA,cACAC,cAAA,cACAC,UAAA,cACAC,cAAA,cACAC,cAAA,cACAC,WAAA,cACAC,UAAA,cACAC,KAAA,aACAC,KAAA,cACAC,KAAA,cACAC,WAAA,cACAC,OAAA,YACAC,cAAA,aACA9K,IAAA,UACA+K,UAAA,cACAC,UAAA,aACAC,YAAA,YACAC,OAAA,cACAC,WAAA,aACAC,SAAA,YACAC,SAAA,cACAC,OAAA,YACAC,OAAA,cACAC,QAAA,cACAC,UAAA,aACAC,UAAA,cACAC,UAAA,cACAC,KAAA,cACAC,YAAA,YACAC,UAAA,aACAC,IAAA,cACAC,KAAA,YACAC,QAAA,cACAC,OAAA,YACAC,UAAA,aACAC,OAAA,cACAC,MAAA,cACA/L,MAAA,cACAgM,WAAA,cACA5L,OAAA,YACA6L,YAAA,mCCtJA,IAAAU,EAAkBlX,EAAQ,KA+B1B,SAAA2X,EAAAP,GACA,IAAAQ,EAnBA,WAKA,IAJA,IAAAA,EAAA,GAEAC,EAAAlW,OAAAwF,KAAA+P,GAEAP,EAAAkB,EAAAnW,OAAAmC,EAAA,EAAqCA,EAAA8S,EAAS9S,IAC9C+T,EAAAC,EAAAhU,IAAA,CAGAP,UAAA,EACAwU,OAAA,MAIA,OAAAF,EAKAG,GACAC,EAAA,CAAAZ,GAIA,IAFAQ,EAAAR,GAAA9T,SAAA,EAEA0U,EAAAtW,QAIA,IAHA,IAAAuW,EAAAD,EAAAE,MACAC,EAAAxW,OAAAwF,KAAA+P,EAAAe,IAEAtB,EAAAwB,EAAAzW,OAAAmC,EAAA,EAAyCA,EAAA8S,EAAS9S,IAAA,CAClD,IAAAuU,EAAAD,EAAAtU,GACAwU,EAAAT,EAAAQ,IAEA,IAAAC,EAAA/U,WACA+U,EAAA/U,SAAAsU,EAAAK,GAAA3U,SAAA,EACA+U,EAAAP,OAAAG,EACAD,EAAAM,QAAAF,IAKA,OAAAR,EAGA,SAAAW,EAAAC,EAAApP,GACA,gBAAA7D,GACA,OAAA6D,EAAAoP,EAAAjT,KAIA,SAAAkT,EAAAnB,EAAAM,GAKA,IAJA,IAAAc,EAAA,CAAAd,EAAAN,GAAAQ,OAAAR,GACAR,EAAAI,EAAAU,EAAAN,GAAAQ,QAAAR,GAEAqB,EAAAf,EAAAN,GAAAQ,OACAF,EAAAe,GAAAb,QACAY,EAAAJ,QAAAV,EAAAe,GAAAb,QACAhB,EAAAyB,EAAArB,EAAAU,EAAAe,GAAAb,QAAAa,GAAA7B,GACA6B,EAAAf,EAAAe,GAAAb,OAIA,OADAhB,EAAAU,WAAAkB,EACA5B,EAGAzW,EAAAC,QAAA,SAAA8W,GAKA,IAJA,IAAAQ,EAAAD,EAAAP,GACAI,EAAA,GAEAK,EAAAlW,OAAAwF,KAAAyQ,GACAjB,EAAAkB,EAAAnW,OAAAmC,EAAA,EAAqCA,EAAA8S,EAAS9S,IAAA,CAC9C,IAAAyT,EAAAO,EAAAhU,GAGA,OAFA+T,EAAAN,GAEAQ,SAKAN,EAAAF,GAAAmB,EAAAnB,EAAAM,IAGA,OAAAJ","file":"17-d3290ff010d20fde7959.js","sourcesContent":["/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (typeof obj === 'undefined') {\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tif (!mixinColor || !mixinColor.rgb) {\n\t\t\tthrow new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n\t\t}\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n"],"sourceRoot":""}