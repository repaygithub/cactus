{"version":3,"sources":["webpack:///./src/components/Color.tsx","webpack:///./src/pages/design-system/color.tsx","webpack:///./src/components/Text.tsx","webpack:///./src/components/Link.tsx"],"names":["upperCaseFirst","word","charAt","toUpperCase","slice","extraStyles","textAlign","ColorDisplay","_ref","hslaStr","displayName","color","textColor","hasDisplayName","Boolean","cactusTheme","colors","hasOwnProperty","isCactusColor","c","Color","_c$array","array","hue","saturation","luminosity","alpha","isWhite","react","cactus_web_cjs","pt","px","pb","mb","width","bg","borderWidth","borderStyle","borderColor","mediumGray","borderRadius","style","hex","ColorBox","_ref2","name","title","children","variant","colorStyles","py","backgroundColor","PaletteBox","_ref3","map","item","index","length","undefined","Table","styled","table","withConfig","componentId","Cell","border","borderTop","borderRight","borderBottom","borderLeft","space","defaultProps","HCell","AccessibilityFlex","Flex","whiteColor","white","darkestContrastColor","darkestContrast","AccessibilityCheck","_ref4","contrast","isDark","isAccessible","level","textSize","checkAccessibility","iconColor","display","height","p","lineHeight","fontSize","status_check","navigation_close","Text","fontWeight","AccessibilityBox","_ref5","compareColor","thisColor","contrastToWhite","contrastToDarkestContrast","m","borderCollapse","borderSpacing","as","position","left","top","pl","toFixed","__webpack_exports__","Helmet_default","a","justifyContent","flexWrap","maxWidth","margin","fontStyle","Link","to","colorStyle","fontFamily","letterSpacing","Span","withComponent","RepayLink","GatsbyLink"],"mappings":"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","file":"component---src-pages-design-system-color-tsx-b18f927b098cefbb1879.js","sourcesContent":["import * as React from 'react'\n\nimport {\n  border,\n  borderBottom,\n  BorderBottomProps,\n  borderColor,\n  BorderColorProps,\n  borderLeft,\n  BorderLeftProps,\n  BorderProps,\n  borderRight,\n  BorderRightProps,\n  borderStyle,\n  BorderStyleProps,\n  borderTop,\n  BorderTopProps,\n  borderWidth,\n  BorderWidthProps,\n  space,\n  SpaceProps,\n  textAlign,\n  TextAlignProps,\n} from 'styled-system'\nimport { Box, Flex } from '@repay/cactus-web'\nimport { Span } from './Text'\nimport cactusTheme, { CactusColor, ColorVariant } from '@repay/cactus-theme'\nimport Color from 'color'\nimport StatusCheck from '@repay/cactus-icons/i/status-check'\nimport StatusX from '@repay/cactus-icons/i/navigation-close'\nimport styled from 'styled-components'\n\nconst upperCaseFirst = (word: string) => word.charAt(0).toUpperCase() + word.slice(1)\nconst extraStyles: React.CSSProperties = { textAlign: 'right' }\n\ntype ColorDisplayProps = {\n  displayName?: string\n  color: CactusColor | string\n  textColor?: CactusColor | string\n}\n\nfunction isCactusColor(color: string): color is CactusColor {\n  return cactusTheme.colors.hasOwnProperty(color)\n}\n\nfunction ColorDisplay({ displayName, color, textColor }: ColorDisplayProps) {\n  const hasDisplayName = Boolean(displayName)\n  let hslaStr: string\n  if (isCactusColor(color)) {\n    hslaStr = cactusTheme.colors[color]\n  } else {\n    hslaStr = color\n  }\n  let c = Color(hslaStr)\n  let [hue, saturation, luminosity, alpha] = c.array()\n  const isWhite = hue === 0 && saturation === 0 && luminosity === 100\n  return (\n    <Box\n      pt={hasDisplayName ? 4 : 3}\n      px={3}\n      pb={3}\n      mb={hasDisplayName ? 0 : '-4px'}\n      width=\"105%\"\n      color={textColor}\n      bg={color}\n      borderWidth=\"1px\"\n      borderStyle=\"solid\"\n      borderColor={isWhite ? cactusTheme.colors.mediumGray : color}\n      borderRadius=\"4px\"\n      style={extraStyles}\n    >\n      {hasDisplayName && (\n        <>\n          <span>#{displayName}</span>\n          <br />\n        </>\n      )}\n      <span>Hex {c.hex().slice(1)}</span>\n      <br />\n      <span>\n        H{hue} S{saturation} L{luminosity} A{alpha}\n      </span>\n    </Box>\n  )\n}\n\ntype ColorBoxProps = {\n  name: ColorVariant\n  title?: string\n  children?: React.ReactNode\n}\n\nexport function ColorBox({ name, title, children }: ColorBoxProps) {\n  let displayName = title || upperCaseFirst(name)\n  let variant = cactusTheme.colorStyles[name]\n  return (\n    <Box px={4} py={3} width=\"240px\">\n      <ColorDisplay\n        displayName={displayName}\n        color={variant.backgroundColor}\n        textColor={variant.color}\n      />\n      {children}\n    </Box>\n  )\n}\ntype PaletteItem = {\n  bg: CactusColor\n  color: CactusColor\n}\n\ntype PaletteBoxProps = {\n  colors: PaletteItem[]\n  title: string\n  children?: React.ReactNode\n}\n\nexport function PaletteBox({ colors, title, children }: PaletteBoxProps) {\n  return (\n    <Box px={4} py={3} width=\"240px\">\n      {colors.map((item, index) => (\n        <ColorDisplay\n          displayName={index === colors.length ? title : undefined}\n          color={item.bg}\n          textColor={item.color}\n        />\n      ))}\n      {children}\n    </Box>\n  )\n}\n\nconst Table = styled.table``\n\ninterface CellProps\n  extends BorderProps,\n    BorderTopProps,\n    BorderRightProps,\n    BorderBottomProps,\n    BorderLeftProps,\n    BorderWidthProps,\n    BorderStyleProps,\n    BorderColorProps,\n    SpaceProps,\n    TextAlignProps {}\n\nconst Cell = styled('td')<CellProps>(\n  border,\n  borderTop,\n  borderRight,\n  borderBottom,\n  borderLeft,\n  borderWidth,\n  borderStyle,\n  borderColor,\n  space,\n  textAlign\n)\n\nCell.defaultProps = {\n  px: 3,\n  pt: 3,\n}\n\nconst HCell = styled(Cell)`\n  position: relative;\n  width: 20%;\n  @media only screen and (max-width: 600px) {\n    width: 10%;\n  }\n`\n\nHCell.defaultProps = {\n  px: 2,\n  pt: 0,\n  pb: 2,\n}\n\nconst AccessibilityFlex = styled(Flex)`\n  width: device-width;\n\n  @media only screen and (max-width: 600px) {\n    padding: 5% 1% 5% 3%;\n    font-size: small;\n    width: device-width;\n  }\n`\n\nconst whiteColor = new Color(cactusTheme.colors.white)\nconst darkestContrastColor = new Color(cactusTheme.colors.darkestContrast)\n\ntype AccessibilityLevel = 'AA' | 'AAA' | 'interface'\ntype AccessibilityTextSize = 'normal' | 'large'\n\nfunction checkAccessibility(\n  contrast: number,\n  level: AccessibilityLevel,\n  textSize?: AccessibilityTextSize\n): boolean {\n  if (level === 'AA') {\n    if (textSize === 'normal') {\n      return contrast > 4.5\n    } else {\n      return contrast > 3\n    }\n  } else if (level === 'AAA') {\n    if (textSize === 'normal') {\n      return contrast > 7\n    } else {\n      return contrast > 4.5\n    }\n  } else {\n    return contrast > 3\n  }\n}\n\ninterface AccessibilityCheckProps {\n  contrast: number\n  isDark: boolean\n  level: AccessibilityLevel\n  textSize?: AccessibilityTextSize\n}\n\nfunction AccessibilityCheck({ contrast, isDark, level, textSize }: AccessibilityCheckProps) {\n  const isAccessible = checkAccessibility(contrast, level, textSize)\n  let bg: CactusColor | null = null\n  let iconColor: CactusColor | null = null\n  if (isDark) {\n    bg = 'white'\n    iconColor = isAccessible ? 'success' : 'error'\n  } else {\n    bg = isAccessible ? 'success' : 'error'\n    iconColor = 'white'\n  }\n  return (\n    <>\n      <Box\n        display=\"inline-block\"\n        borderRadius=\"50%\"\n        width=\"24px\"\n        height=\"24px\"\n        p={1}\n        bg={bg}\n        color={iconColor}\n        style={{ lineHeight: '1em', fontSize: '16px', textAlign: 'center' }}\n      >\n        {isAccessible ? <StatusCheck /> : <StatusX />}\n      </Box>\n      <br />\n      <Span\n        color={isDark ? 'white' : 'darkestContrast'}\n        fontSize=\"12px\"\n        lineHeight=\"1em\"\n        fontWeight={300}\n      >\n        {isAccessible ? 'Pass' : 'Fail'}\n      </Span>\n    </>\n  )\n}\n\ninterface AccessibilityBoxProps {\n  color: CactusColor\n  title: string\n  isDark: boolean\n}\n\nexport function AccessibilityBox({ color, title, isDark }: AccessibilityBoxProps) {\n  const compareColor: CactusColor = isDark ? 'white' : 'darkestContrast'\n  const borderColor = cactusTheme.colors[compareColor]\n  const borderStyle = `1px solid ${borderColor}`\n  const hslaStr = cactusTheme.colors[color]\n  let thisColor = new Color(hslaStr)\n  const contrastToWhite = thisColor.contrast(whiteColor)\n  const contrastToDarkestContrast = thisColor.contrast(darkestContrastColor)\n  return (\n    <AccessibilityFlex\n      m={4}\n      p={4}\n      borderRadius=\"2px\"\n      bg={color}\n      color={compareColor}\n      style={color === 'white' ? { border: borderStyle } : {}}\n    >\n      <Table style={{ borderCollapse: 'collapse', borderSpacing: 0 }}>\n        <thead>\n          <tr style={{ borderBottom: borderStyle }}>\n            <HCell as=\"th\" textAlign=\"left\">\n              <Span fontSize=\"h4\" lineHeight=\"1em\" fontWeight={400}>\n                {title}\n              </Span>\n              <Box position=\"absolute\" left=\"8px\" top=\"-48px\">\n                <Span color=\"darkestContrast\" fontSize=\"9.6px\" fontWeight={400}>\n                  Color\n                </Span>\n              </Box>\n            </HCell>\n            <HCell as=\"th\" borderRight={borderStyle} style={{ width: '5px' }}>\n              <Span fontWeight={300} fontSize=\"small\" lineHeight=\"1em\">\n                Ratio\n              </Span>\n            </HCell>\n            <HCell as=\"th\">\n              <Span fontSize=\"h3\" lineHeight=\"1em\" fontWeight={400}>\n                Aa\n              </Span>\n              <Box position=\"absolute\" left=\"8px\" top=\"-48px\" width=\"150%\">\n                <Span color=\"darkestContrast\" fontSize=\"9.6px\" fontWeight={400}>\n                  AA Levels\n                </Span>\n              </Box>\n            </HCell>\n            <HCell as=\"th\" borderRight={borderStyle}>\n              <Span fontSize=\"small\" lineHeight=\"1em\" fontWeight={400}>\n                Aa\n              </Span>\n            </HCell>\n            <HCell as=\"th\">\n              <Span fontSize=\"h3\" lineHeight=\"1em\" fontWeight={400}>\n                Aa\n              </Span>\n              <Box position=\"absolute\" left=\"8px\" top=\"-48px\" width=\"150%\">\n                <Span color=\"darkestContrast\" fontSize=\"9.6px\" fontWeight={400}>\n                  AAA Levels\n                </Span>\n              </Box>\n            </HCell>\n            <HCell as=\"th\" borderRight={borderStyle}>\n              <Span fontSize=\"small\" lineHeight=\"1em\" fontWeight={400}>\n                Aa\n              </Span>\n            </HCell>\n            <HCell as=\"th\" pl={3}>\n              <Box\n                display=\"inline-block\"\n                width=\"20px\"\n                height=\"20px\"\n                borderRadius=\"3px\"\n                borderWidth=\"1px\"\n                borderStyle=\"solid\"\n                borderColor={compareColor}\n                bg=\"transparent\"\n              />\n              <Box position=\"absolute\" left=\"0\" top=\"-48px\" width=\"100%\">\n                <Span color=\"darkestContrast\" fontSize=\"9.6px\" fontWeight={400}>\n                  Interface\n                </Span>\n              </Box>\n            </HCell>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <Cell textAlign=\"left\">\n              <Span color=\"white\" fontSize=\"small\">\n                White\n              </Span>\n            </Cell>\n            <Cell borderRight={borderStyle}>{contrastToWhite.toFixed(2)}</Cell>\n            <Cell textAlign=\"center\">\n              <AccessibilityCheck\n                isDark={isDark}\n                contrast={contrastToWhite}\n                level=\"AA\"\n                textSize=\"large\"\n              />\n            </Cell>\n            <Cell textAlign=\"center\" borderRight={borderStyle}>\n              <AccessibilityCheck\n                isDark={isDark}\n                contrast={contrastToWhite}\n                level=\"AA\"\n                textSize=\"normal\"\n              />\n            </Cell>\n            <Cell textAlign=\"center\">\n              <AccessibilityCheck\n                isDark={isDark}\n                contrast={contrastToWhite}\n                level=\"AAA\"\n                textSize=\"large\"\n              />\n            </Cell>\n            <Cell textAlign=\"center\" borderRight={borderStyle}>\n              <AccessibilityCheck\n                isDark={isDark}\n                contrast={contrastToWhite}\n                level=\"AAA\"\n                textSize=\"normal\"\n              />\n            </Cell>\n            <Cell textAlign=\"center\">\n              <AccessibilityCheck isDark={isDark} contrast={contrastToWhite} level=\"interface\" />\n            </Cell>\n          </tr>\n          <tr>\n            <Cell textAlign=\"left\">\n              <Span color=\"darkestContrast\" fontSize=\"small\">\n                DarkestContrast\n              </Span>\n            </Cell>\n            <Cell borderRight={borderStyle}>{contrastToDarkestContrast.toFixed(2)}</Cell>\n            <Cell textAlign=\"center\">\n              <AccessibilityCheck\n                isDark={isDark}\n                contrast={contrastToDarkestContrast}\n                level=\"AA\"\n                textSize=\"large\"\n              />\n            </Cell>\n            <Cell textAlign=\"center\" borderRight={borderStyle}>\n              <AccessibilityCheck\n                isDark={isDark}\n                contrast={contrastToDarkestContrast}\n                level=\"AA\"\n                textSize=\"normal\"\n              />\n            </Cell>\n            <Cell textAlign=\"center\">\n              <AccessibilityCheck\n                isDark={isDark}\n                contrast={contrastToDarkestContrast}\n                level=\"AAA\"\n                textSize=\"large\"\n              />\n            </Cell>\n            <Cell textAlign=\"center\" borderRight={borderStyle}>\n              <AccessibilityCheck\n                isDark={isDark}\n                contrast={contrastToDarkestContrast}\n                level=\"AAA\"\n                textSize=\"normal\"\n              />\n            </Cell>\n            <Cell textAlign=\"center\">\n              <AccessibilityCheck\n                isDark={isDark}\n                contrast={contrastToDarkestContrast}\n                level=\"interface\"\n              />\n            </Cell>\n          </tr>\n        </tbody>\n      </Table>\n    </AccessibilityFlex>\n  )\n}\n","import * as React from 'react'\n\nimport { AccessibilityBox, ColorBox, PaletteBox } from '../../components/Color'\nimport { Box, Flex } from '@repay/cactus-web'\nimport Helmet from 'react-helmet'\nimport Text, { Span } from '../../components/Text'\n\nimport Link from '../../components/Link'\n\nexport default () => {\n  return (\n    <>\n      <Helmet title=\"Color\" />\n      <h1>Color</h1>\n      <p>\n        The first foundation is Color, which is one of the most important aspects of our platform.\n        Based on REPAY having many white-labelled products, we carefully thought of a strategy so we\n        can achieve the same look and feel while meeting accessibility standards.\n      </p>\n      <Flex display=\"flex\" justifyContent=\"center\" flexWrap=\"wrap\" maxWidth=\"1200px\" m=\"0 auto\">\n        <ColorBox name=\"base\" />\n        <ColorBox name=\"callToAction\" />\n        <ColorBox name=\"standard\" title=\"White\" />\n        <ColorBox name=\"lightContrast\" />\n        <ColorBox name=\"darkestContrast\" />\n        <ColorBox name=\"success\" />\n        <ColorBox name=\"error\" />\n        <ColorBox name=\"warning\" />\n        <ColorBox name=\"disable\" />\n      </Flex>\n      <h2>Color Scheme</h2>\n      <p>\n        The standard Cactus color scheme is based on a monochromatic palette and a complementary\n        action scheme. All the colors of the monochromatic scheme are based on one factor (HUE) and\n        the rest will be variations (brightness and saturation).\n      </p>\n      <h3 style={{ fontWeight: 400 }}>Monochromatic Scheme</h3>\n      <Flex display=\"flex\" justifyContent=\"center\" flexWrap=\"wrap\" maxWidth=\"1200px\" m=\"0 auto\">\n        <ColorBox name=\"base\">\n          <h4>Base Color</h4>\n          <Text fontSize=\"small\">\n            This color is the brand color or base color of the scheme. It will be prominent\n            throughout the product.\n          </Text>\n        </ColorBox>\n        <ColorBox name=\"callToAction\">\n          <h4>Call to Action</h4>\n          <Text fontSize=\"small\">\n            This color is a lighter variation of the base color. This accent color will be used in\n            small amounts in order to stand out.\n          </Text>\n        </ColorBox>\n        <ColorBox name=\"standard\" title=\"White\">\n          <h4>White</h4>\n          <Text fontSize=\"small\">\n            White is a common color included in a color scheme. It provides balance and harmonizes\n            the scheme.\n          </Text>\n        </ColorBox>\n        <ColorBox name=\"lightContrast\">\n          <h4>Light Contrast</h4>\n          <Text fontSize=\"small\">\n            Contrast colors are founded on the base color, but desaturated and built on a scale.\n          </Text>\n        </ColorBox>\n        <ColorBox name=\"darkestContrast\">\n          <h4>Darkest Contrast</h4>\n          <Text fontSize=\"small\">A dark and desaturated version of the base color.</Text>\n        </ColorBox>\n        <ColorBox name=\"success\">\n          <h4>Green</h4>\n          <Text fontSize=\"small\">\n            This color is part of our intuitive scheme. Green will mean success and positive\n            outcomes.\n          </Text>\n        </ColorBox>\n        <ColorBox name=\"error\">\n          <h4>Red</h4>\n          <Text fontSize=\"small\">\n            This color is part of our intuitive scheme. Red will mean error and destructive\n            outcomes.\n          </Text>\n        </ColorBox>\n        <ColorBox name=\"warning\">\n          <h4>Yellow</h4>\n          <Text fontSize=\"small\">\n            This color is part of our intuitive scheme. Yellow will indicate warning and bringing to\n            attention.\n          </Text>\n        </ColorBox>\n        <ColorBox name=\"disable\">\n          <h4>Gray</h4>\n          <Text fontSize=\"small\">\n            This color is part of our intuitive scheme. Gray color indicates disabled or not yet\n            available.\n          </Text>\n        </ColorBox>\n      </Flex>\n      <h2>Color Application</h2>\n      <p>\n        Colors must be used in a consistent manor throughout the application to solidify the design\n        language and guide the user.\n      </p>\n      <Flex\n        display=\"flex\"\n        justifyContent=\"center\"\n        flexWrap=\"wrap\"\n        maxWidth=\"1200px\"\n        margin=\"0 auto\"\n      >\n        <ColorBox name=\"base\">\n          <h4>Base Color</h4>\n          <Text fontSize=\"small\">Headers, standard buttons, selection controls, hover states</Text>\n        </ColorBox>\n        <ColorBox name=\"callToAction\">\n          <h4>Call to Action</h4>\n          <Text fontSize=\"small\">Call to action buttons, Icons, hover and focus states</Text>\n        </ColorBox>\n        <ColorBox name=\"standard\" title=\"White\">\n          <h4>White</h4>\n          <Text fontSize=\"small\">Surfaces, text for dark backgrounds, and creating contrast</Text>\n        </ColorBox>\n        <PaletteBox\n          title=\"LightContrast\"\n          colors={[\n            { bg: 'darkContrast', color: 'white' },\n            { bg: 'mediumContrast', color: 'white' },\n            { bg: 'lightContrast', color: 'darkestContrast' },\n          ]}\n        >\n          <h4>Light Contrast</h4>\n          <Text fontSize=\"small\">Zebra contrast, shadows, text field placeholder</Text>\n        </PaletteBox>\n        <ColorBox name=\"darkestContrast\">\n          <h4>Darkest Contrast</h4>\n          <Text fontSize=\"small\">Text</Text>\n        </ColorBox>\n        <ColorBox name=\"success\">\n          <h4>Green</h4>\n          <Text fontSize=\"small\">\n            Positive indicators, alert messages, action buttons, text fields, headlines, and icons\n          </Text>\n        </ColorBox>\n        <ColorBox name=\"error\">\n          <h4>Red</h4>\n          <Text fontSize=\"small\">\n            Negative indicators, alert messages, action buttons, text fields, headlines, and icons\n          </Text>\n        </ColorBox>\n        <ColorBox name=\"warning\">\n          <h4>Yellow</h4>\n          <Text fontSize=\"small\">\n            Moderate indicators, alert messages, action buttons, text fields, headlines, and icons\n          </Text>\n        </ColorBox>\n        <PaletteBox\n          title=\"Disable\"\n          colors={[\n            { bg: 'darkGray', color: 'white' },\n            { bg: 'mediumGray', color: 'white' },\n            { bg: 'lightGray', color: 'darkestContrast' },\n          ]}\n        >\n          <h4>Gray</h4>\n          <Text fontSize=\"small\">\n            Neutral indicators, alert messages, action buttons, text fields, headlines, and icons\n          </Text>\n        </PaletteBox>\n      </Flex>\n      <h2>Accessibility Standards</h2>\n      <Text>\n        Beware of foreground and background contrast issues and ensure the text always passes\n        minimum WCAG AA guidance. We can quantify contrast in a \"contrast ratio\" of the background\n        color and the text color.\n      </Text>\n      <Text>\n        <Span fontWeight={600}>Level AA</Span> requires a contrast ratio of at least 4.5:1 for\n        normal text and 3:1 for large text. <br />\n        Graphics and user <Span fontWeight={600}>interface</Span> components (such as form input\n        borders) also require a 3:1. <br />\n        <Span fontWeight={600}>Level AAA</Span> requires a contrast ratio of at least 7:1 for normal\n        text and 4.5:1 for large text.\n      </Text>\n      <Text fontStyle=\"italic\">\n        Large text is defined as 14 point (18.66px) and bold or 18 point (24px) and larger and not\n        bold. Note that these requirements don't apply to decorative elements like logos and\n        illustrations.\n      </Text>\n      <Flex\n        display=\"flex\"\n        justifyContent=\"center\"\n        flexWrap=\"wrap\"\n        maxWidth=\"1200px\"\n        margin=\"0 auto\"\n      >\n        <AccessibilityBox color=\"base\" title=\"Base\" isDark />\n        <AccessibilityBox color=\"callToAction\" title=\"CTA\" isDark />\n        <AccessibilityBox color=\"white\" title=\"White\" isDark={false} />\n        <AccessibilityBox color=\"darkestContrast\" title=\"Darkest Contrast\" isDark />\n        <AccessibilityBox color=\"darkContrast\" title=\"Dark Contrast\" isDark />\n        <AccessibilityBox color=\"mediumContrast\" title=\"Medium Contrast\" isDark />\n        <AccessibilityBox color=\"lightContrast\" title=\"Light Contrast\" isDark={false} />\n        <AccessibilityBox color=\"success\" title=\"Success\" isDark />\n        <AccessibilityBox color=\"error\" title=\"Error\" isDark />\n        <AccessibilityBox color=\"warning\" title=\"Warning\" isDark={false} />\n        <AccessibilityBox color=\"lightGray\" title=\"Light Gray\" isDark={false} />\n        <AccessibilityBox color=\"mediumGray\" title=\"Medium Gray\" isDark />\n        <AccessibilityBox color=\"darkGray\" title=\"Dark Gray\" isDark />\n      </Flex>\n      <Text as=\"h4\" fontSize=\"h4\">\n        Exceptions to contrast requirements:\n      </Text>\n      <Text>\n        <Span fontWeight={600}>Large Text:</Span> Large-scale text and images of large-scale text\n        have a contrast ratio of at least 3:1.\n      </Text>\n      <Text>\n        <Span fontWeight={600}>Incidental:</Span> Text or images of text that are part of an\n        inactive user interface component, pure decoration, not visible to users, or within a\n        picture that contains significant other visual content all have no contrast requirements.\n      </Text>\n      <Text>\n        <Span fontWeight={600}>Logos:</Span> Text that is part of a logo or brand name has no\n        minimum contrast requirement.\n      </Text>\n      <p>\n        Now we'll review <Link to=\"/design-system/typography/\">typography</Link> decisions.\n      </p>\n    </>\n  )\n}\n","import {\n  color,\n  ColorProps,\n  colorStyle,\n  ColorStyleProps,\n  fontFamily,\n  FontFamilyProps,\n  fontSize,\n  FontSizeProps,\n  fontStyle,\n  FontStyleProps,\n  fontWeight,\n  FontWeightProps,\n  letterSpacing,\n  LetterSpacingProps,\n  lineHeight,\n  LineHeightProps,\n  space,\n  SpaceProps,\n  textAlign,\n  TextAlignProps,\n} from 'styled-system'\nimport styled from 'styled-components'\n\ninterface TextProps\n  extends SpaceProps,\n    FontSizeProps,\n    ColorProps,\n    ColorStyleProps,\n    FontFamilyProps,\n    FontWeightProps,\n    TextAlignProps,\n    FontStyleProps,\n    LineHeightProps,\n    LetterSpacingProps {}\n\nconst Text = styled('p')<TextProps>(\n  space,\n  fontSize,\n  color,\n  colorStyle,\n  fontFamily,\n  fontWeight,\n  textAlign,\n  fontStyle,\n  lineHeight,\n  letterSpacing\n)\n\nexport const Span = Text.withComponent('span')\n\nexport default Text\n","import { Link as GatsbyLink } from 'gatsby'\nimport { Link as RepayLink } from '@repay/cactus-web'\n\nconst Link = RepayLink.withComponent(GatsbyLink)\n\nexport default Link\n"],"sourceRoot":""}