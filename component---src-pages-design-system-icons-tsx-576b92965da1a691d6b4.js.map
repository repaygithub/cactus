{"version":3,"sources":["webpack:///./src/helpers/iconGroups.ts","webpack:///./src/pages/design-system/icons.tsx","webpack:///../modules/cactus-web/dist/Link/Link.js","webpack:///./src/components/Text.tsx","webpack:///./src/components/Link.tsx"],"names":["iconsCategoryMap","Object","entries","iconsList","filter","fullName","Icon","path","replace","toLowerCase","split","category","name","join","hasOwnProperty","push","categories","keys","sort","title","as","fontSize","href","map","cat","iconList","key","style","textTransform","flexWrap","justifyContent","m","flexBasis","flexDirection","alignItems","mt","mb","_templateObject","data","_taggedTemplateLiteral","Link","styled","props","_omitMargins","omitMargins","to","rest","_objectWithoutProperties","React","createElement","assign","p","theme","colors","callToAction","mediumContrast","base","transparentCTA","margin","propTypes","PropTypes","string","isRequired","Text","space","color","colorStyle","fontFamily","fontWeight","textAlign","fontStyle","lineHeight","letterSpacing","Span","withComponent","LocalLink","RepayLink","GatsbyLink","startsWith","global","window","location","origin","isOutside"],"mappings":"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","file":"component---src-pages-design-system-icons-tsx-576b92965da1a691d6b4.js","sourcesContent":["import * as iconsList from '@repay/cactus-icons'\n\ninterface IconObject {\n  name: string\n  fullName: string\n  path: string\n  category: string\n  Icon: React.ComponentType<any>\n}\n\nconst iconsCategoryMap: { [key: string]: IconObject[] } = {}\n\nconst icons = Object.entries(iconsList).filter(([name]): boolean => name !== 'iconSizes')\n\nfor (const [fullName, Icon] of icons) {\n  const path = fullName.replace(/(.)([A-Z])/, '$1-$2').toLowerCase()\n  const [category, ...nameArr] = path.split('-')\n  const name = nameArr.join(' ')\n  if (!iconsCategoryMap.hasOwnProperty(category)) {\n    iconsCategoryMap[category] = []\n  }\n  iconsCategoryMap[category].push({\n    name,\n    fullName,\n    path,\n    category,\n    Icon,\n  })\n}\n\nconst categories = Object.keys(iconsCategoryMap).sort()\n\nexport { iconsCategoryMap, categories }\n","import { Flex } from '@repay/cactus-web'\nimport * as React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport Link from '../../components/Link'\nimport Text from '../../components/Text'\nimport { categories, iconsCategoryMap } from '../../helpers/iconGroups'\n\nexport default (): React.ReactElement => (\n  <>\n    <Helmet title=\"Icons\" />\n    <Text as=\"h1\" fontSize=\"h1\">\n      Icons\n    </Text>\n    <Text>\n      Icons should be descriptive, simple, readable, and consistent. Use them to communicate an\n      action, status, or help separate objects in a list. In other words, icons can represent\n      objects, tools, actions, or desired results.\n    </Text>\n    <Text as=\"h2\" fontSize=\"h2\">\n      Available Icons\n    </Text>\n    <Text>\n      All icons are part of a category based on primary purpose. Some generic icons will by used\n      outside the named purposed due to utility.\n    </Text>\n    <Text>\n      To learn how to use the icons see the <Link href=\"/icons/\">Icons documentation</Link>.\n    </Text>\n    {categories.map(\n      (cat): React.ReactElement => {\n        const iconList = iconsCategoryMap[cat]\n        return (\n          <React.Fragment key={cat}>\n            <Text as=\"h3\" fontSize=\"h3\" style={{ textTransform: 'capitalize' }}>\n              {cat}\n            </Text>\n            <Flex flexWrap=\"wrap\" justifyContent=\"start\">\n              {iconList.map(\n                ({ name, path, Icon }): React.ReactElement => (\n                  <Flex\n                    key={path}\n                    m={4}\n                    flexBasis=\"64px\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                  >\n                    <Icon style={{ fontSize: '40px' }} />\n                    <Text m={0} fontSize=\"12px\">\n                      {name}\n                    </Text>\n                  </Flex>\n                )\n              )}\n            </Flex>\n          </React.Fragment>\n        )\n      }\n    )}\n    <Text mt={6} mb={5} fontSize=\"h3\">\n      Lastly, the <Link href=\"/design-system/shared-styles/\">shared styles</Link> such as shadows\n      and spacing which round out the foundation.\n    </Text>\n  </>\n)\n","import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  font-style: italic;\\n  outline: none;\\n  position: relative;\\n\\n  :link {\\n    color: \", \";\\n  }\\n\\n  :visited {\\n    color: \", \";\\n  }\\n\\n  :hover {\\n    color: \", \";\\n  }\\n\\n  :focus {\\n    color: \", \";\\n    background-color: \", \";\\n  }\\n\\n  \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { margin } from 'styled-system';\nimport { omitMargins } from '../helpers/omit';\n\nvar LinkBase = function LinkBase(props) {\n  var _omitMargins = omitMargins(props),\n      to = _omitMargins.to,\n      rest = _objectWithoutProperties(_omitMargins, [\"to\"]);\n\n  return /*#__PURE__*/React.createElement(\"a\", Object.assign({\n    href: to\n  }, rest));\n};\n\nexport var Link = styled(LinkBase)(_templateObject(), function (p) {\n  return p.theme.colors.callToAction;\n}, function (p) {\n  return p.theme.colors.mediumContrast;\n}, function (p) {\n  return p.theme.colors.base;\n}, function (p) {\n  return p.theme.colors.callToAction;\n}, function (p) {\n  return p.theme.colors.transparentCTA;\n}, margin); // @ts-ignore\n\nLink.propTypes = {\n  to: PropTypes.string.isRequired\n};\nexport default Link;","import styled from 'styled-components'\nimport {\n  color,\n  ColorProps,\n  colorStyle,\n  ColorStyleProps,\n  fontFamily,\n  FontFamilyProps,\n  fontSize,\n  FontSizeProps,\n  fontStyle,\n  FontStyleProps,\n  fontWeight,\n  FontWeightProps,\n  letterSpacing,\n  LetterSpacingProps,\n  lineHeight,\n  LineHeightProps,\n  space,\n  SpaceProps,\n  textAlign,\n  TextAlignProps,\n} from 'styled-system'\n\ninterface TextProps\n  extends SpaceProps,\n    FontSizeProps,\n    ColorProps,\n    ColorStyleProps,\n    FontFamilyProps,\n    FontWeightProps,\n    TextAlignProps,\n    FontStyleProps,\n    LineHeightProps,\n    LetterSpacingProps {}\n\nconst Text = styled('p')<TextProps>(\n  space,\n  fontSize,\n  color,\n  colorStyle,\n  fontFamily,\n  fontWeight,\n  textAlign,\n  fontStyle,\n  lineHeight,\n  letterSpacing\n)\n\nexport const Span = Text.withComponent('span')\n\nexport default Text\n","import { Link as RepayLink } from '@repay/cactus-web'\nimport { Link as GatsbyLink } from 'gatsby'\nimport React from 'react'\n\nconst LocalLink = RepayLink.withComponent(GatsbyLink)\n\ninterface LinkProps {\n  href?: string\n  to?: string\n  [k: string]: any\n}\n\nconst isOutside = (href: string): boolean =>\n  href.startsWith('http') && !(global.window && href.startsWith(window.location.origin))\n\nconst Link = ({ href, to, ...rest }: LinkProps): React.ReactElement => {\n  to = to || href || ''\n  if (isOutside(to)) {\n    return <RepayLink to={to} {...rest} />\n  }\n  return <LocalLink to={to} {...rest} />\n}\n\nexport default Link\n"],"sourceRoot":""}