diff --git a/node_modules/react-final-form/dist/react-final-form.cjs.js b/node_modules/react-final-form/dist/react-final-form.cjs.js
index b133951..eb4adf0 100644
--- a/node_modules/react-final-form/dist/react-final-form.cjs.js
+++ b/node_modules/react-final-form/dist/react-final-form.cjs.js
@@ -439,6 +439,9 @@ var getValue = function getValue(event, currentValue, valueProp, isReactNative)
 
   switch (type) {
     case "checkbox":
+      if (valueProp === undefined) {
+        valueProp = _detypedEvent$target.defaultValue || undefined
+      }
       if (valueProp !== undefined) {
         // we are maintaining an array, not just a boolean
         if (checked) {
@@ -662,7 +665,7 @@ function useField(name, config) {
     },
 
     onBlur: useConstantCallback(function (event) {
-      state.blur();
+      form.blur(state.name);
 
       if (formatOnBlur) {
         /**
@@ -673,27 +676,15 @@ function useField(name, config) {
          * the value update from Final Form.
          */
         var fieldState = form.getFieldState(state.name);
-        state.change(format(fieldState.value, state.name));
+        form.change(state.name, format(fieldState.value, state.name));
       }
     }),
     onChange: useConstantCallback(function (event) {
-      // istanbul ignore next
-      if (process.env.NODE_ENV !== "production" && event && event.target) {
-        var targetType = event.target.type;
-        var unknown = ~["checkbox", "radio", "select-multiple"].indexOf(targetType) && !type && component !== "select";
-
-        var _value2 = targetType === "select-multiple" ? state.value : _value;
-
-        if (unknown) {
-          console.error("You must pass `type=\"" + (targetType === "select-multiple" ? "select" : targetType) + "\"` prop to your Field(" + name + ") component.\n" + ("Without it we don't know how to unpack your `value` prop - " + (Array.isArray(_value2) ? "[" + _value2 + "]" : "\"" + _value2 + "\"") + "."));
-        }
-      }
-
       var value = event && event.target ? getValue(event, state.value, _value, isReactNative) : event;
-      state.change(parse(value, name));
+      form.change(state.name, parse(value, name));
     }),
     onFocus: useConstantCallback(function (event) {
-      return state.focus();
+      return form.focus(state.name);
     })
   };
 
diff --git a/node_modules/react-final-form/dist/react-final-form.es.js b/node_modules/react-final-form/dist/react-final-form.es.js
index c69f57f..2fa01a4 100644
--- a/node_modules/react-final-form/dist/react-final-form.es.js
+++ b/node_modules/react-final-form/dist/react-final-form.es.js
@@ -411,6 +411,9 @@ var getValue = function getValue(event, currentValue, valueProp, isReactNative)
 
   switch (type) {
     case "checkbox":
+      if (valueProp === undefined) {
+        valueProp = _detypedEvent$target.defaultValue || undefined
+      }
       if (valueProp !== undefined) {
         // we are maintaining an array, not just a boolean
         if (checked) {
@@ -634,7 +637,7 @@ function useField(name, config) {
     },
 
     onBlur: useConstantCallback(function (event) {
-      state.blur();
+      form.blur(state.name);
 
       if (formatOnBlur) {
         /**
@@ -645,27 +648,15 @@ function useField(name, config) {
          * the value update from Final Form.
          */
         var fieldState = form.getFieldState(state.name);
-        state.change(format(fieldState.value, state.name));
+        form.change(state.name, format(fieldState.value, state.name));
       }
     }),
     onChange: useConstantCallback(function (event) {
-      // istanbul ignore next
-      if (process.env.NODE_ENV !== "production" && event && event.target) {
-        var targetType = event.target.type;
-        var unknown = ~["checkbox", "radio", "select-multiple"].indexOf(targetType) && !type && component !== "select";
-
-        var _value2 = targetType === "select-multiple" ? state.value : _value;
-
-        if (unknown) {
-          console.error("You must pass `type=\"" + (targetType === "select-multiple" ? "select" : targetType) + "\"` prop to your Field(" + name + ") component.\n" + ("Without it we don't know how to unpack your `value` prop - " + (Array.isArray(_value2) ? "[" + _value2 + "]" : "\"" + _value2 + "\"") + "."));
-        }
-      }
-
       var value = event && event.target ? getValue(event, state.value, _value, isReactNative) : event;
-      state.change(parse(value, name));
+      form.change(state.name, parse(value, name));
     }),
     onFocus: useConstantCallback(function (event) {
-      return state.focus();
+      return form.focus(state.name);
     })
   };
 
